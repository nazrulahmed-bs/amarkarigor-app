define(['dart_sdk', 'packages/syncfusion_flutter_sliders/src/common.dart', 'packages/syncfusion_flutter_sliders/src/slider_shapes.dart', 'packages/syncfusion_flutter_sliders/src/constants.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/intl/src/intl/date_format.dart', 'packages/syncfusion_flutter_core/src/theme/theme_widget.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/team.dart', 'packages/flutter/src/gestures/monodrag.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/services/mouse_tracking.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/gestures/events.dart'], (function load__packages__syncfusion_flutter_sliders__src__slider_dart(dart_sdk, packages__syncfusion_flutter_sliders__src__common$46dart, packages__syncfusion_flutter_sliders__src__slider_shapes$46dart, packages__syncfusion_flutter_sliders__src__constants$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__intl__src__intl__number_parser$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__intl__src__intl__date_format$46dart, packages__syncfusion_flutter_core__src__theme__theme_widget$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__team$46dart, packages__flutter__src__gestures__monodrag$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__services__mouse_tracking$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__gestures__events$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const common = packages__syncfusion_flutter_sliders__src__common$46dart.src__common;
  const slider_shapes = packages__syncfusion_flutter_sliders__src__slider_shapes$46dart.src__slider_shapes;
  const slider_base = packages__syncfusion_flutter_sliders__src__slider_shapes$46dart.src__slider_base;
  const constants = packages__syncfusion_flutter_sliders__src__constants$46dart.src__constants;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const slider_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__slider_theme;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const team$ = packages__flutter__src__gestures__team$46dart.src__gestures__team;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const mouse_tracking = packages__flutter__src__services__mouse_tracking$46dart.src__services__mouse_tracking;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  var slider$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $contains = dartx.contains;
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    doubleTovoid: () => (T.doubleTovoid = dart.constFn(dart.fnType(dart.void, [core.double])))(),
    ObjectFlagPropertyOfdoubleTovoid: () => (T.ObjectFlagPropertyOfdoubleTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(T.doubleTovoid())))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    ObjectFlagPropertyOfdynamicTovoid: () => (T.ObjectFlagPropertyOfdynamicTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(T.dynamicTovoid())))(),
    EnumPropertyOfLabelPlacement: () => (T.EnumPropertyOfLabelPlacement = dart.constFn(diagnostics.EnumProperty$(common.LabelPlacement)))(),
    DiagnosticsPropertyOfNumberFormat: () => (T.DiagnosticsPropertyOfNumberFormat = dart.constFn(diagnostics.DiagnosticsProperty$(number_format.NumberFormat)))(),
    EnumPropertyOfDateIntervalType: () => (T.EnumPropertyOfDateIntervalType = dart.constFn(diagnostics.EnumProperty$(common.DateIntervalType)))(),
    dynamicAndStringToString: () => (T.dynamicAndStringToString = dart.constFn(dart.fnType(core.String, [dart.dynamic, core.String])))(),
    ObjectFlagPropertyOfdynamicAndStringToString: () => (T.ObjectFlagPropertyOfdynamicAndStringToString = dart.constFn(diagnostics.ObjectFlagProperty$(T.dynamicAndStringToString())))(),
    LinkedMapOfChildElements$Element: () => (T.LinkedMapOfChildElements$Element = dart.constFn(_js_helper.LinkedMap$(constants.ChildElements, framework.Element)))(),
    LinkedMapOfElement$ChildElements: () => (T.LinkedMapOfElement$ChildElements = dart.constFn(_js_helper.LinkedMap$(framework.Element, constants.ChildElements)))(),
    RenderBoxN: () => (T.RenderBoxN = dart.constFn(dart.nullable(box.RenderBox)))(),
    LinkedMapOfChildElements$RenderBox: () => (T.LinkedMapOfChildElements$RenderBox = dart.constFn(_js_helper.LinkedMap$(constants.ChildElements, box.RenderBox)))(),
    LinkedMapOfRenderBox$ChildElements: () => (T.LinkedMapOfRenderBox$ChildElements = dart.constFn(_js_helper.LinkedMap$(box.RenderBox, constants.ChildElements)))(),
    SyncIterableOfRenderBox: () => (T.SyncIterableOfRenderBox = dart.constFn(_js_helper.SyncIterable$(box.RenderBox)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, T.OffsetN()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: common.LabelPlacement.prototype,
        [_name]: "LabelPlacement.onTicks",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: slider_shapes.SfTrackShape.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: slider_shapes.SfDividerShape.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: slider_shapes.SfOverlayShape.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: slider_shapes.SfThumbShape.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: slider_shapes.SfTickShape.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: slider_shapes.SfMinorTickShape.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: slider_shapes.SfRectangularTooltipShape.prototype
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: common.SliderTooltipPosition.prototype,
        [_name]: "SliderTooltipPosition.left",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 100000
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284572001.0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292927712.0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 8,
        [OffsetBase__dx]: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 5,
        [OffsetBase__dx]: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 5,
        [OffsetBase__dx]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 13,
        [OffsetBase__dx]: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 8
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 5
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 5
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 13
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 1398,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "min",
        [_Location_column]: 9,
        [_Location_line]: 1399,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "max",
        [_Location_column]: 9,
        [_Location_line]: 1400,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "value",
        [_Location_column]: 9,
        [_Location_line]: 1401,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 9,
        [_Location_line]: 1402,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChangeStart",
        [_Location_column]: 9,
        [_Location_line]: 1403,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChangeEnd",
        [_Location_column]: 9,
        [_Location_line]: 1404,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "interval",
        [_Location_column]: 9,
        [_Location_line]: 1405,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stepSize",
        [_Location_column]: 9,
        [_Location_line]: 1406,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stepDuration",
        [_Location_column]: 9,
        [_Location_line]: 1407,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minorTicksPerInterval",
        [_Location_column]: 9,
        [_Location_line]: 1408,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showTicks",
        [_Location_column]: 9,
        [_Location_line]: 1409,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLabels",
        [_Location_column]: 9,
        [_Location_line]: 1410,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showDividers",
        [_Location_column]: 9,
        [_Location_line]: 1411,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableTooltip",
        [_Location_column]: 9,
        [_Location_line]: 1412,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shouldAlwaysShowTooltip",
        [_Location_column]: 9,
        [_Location_line]: 1413,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isInversed",
        [_Location_column]: 9,
        [_Location_line]: 1414,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inactiveColor",
        [_Location_column]: 9,
        [_Location_line]: 1417,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "activeColor",
        [_Location_column]: 9,
        [_Location_line]: 1419,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPlacement",
        [_Location_column]: 9,
        [_Location_line]: 1420,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "numberFormat",
        [_Location_column]: 9,
        [_Location_line]: 1421,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dateIntervalType",
        [_Location_column]: 9,
        [_Location_line]: 1422,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dateFormat",
        [_Location_column]: 9,
        [_Location_line]: 1423,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelFormatterCallback",
        [_Location_column]: 9,
        [_Location_line]: 1424,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipTextFormatterCallback",
        [_Location_column]: 9,
        [_Location_line]: 1426,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "semanticFormatterCallback",
        [_Location_column]: 9,
        [_Location_line]: 1428,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "trackShape",
        [_Location_column]: 9,
        [_Location_line]: 1429,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dividerShape",
        [_Location_column]: 9,
        [_Location_line]: 1430,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayShape",
        [_Location_column]: 9,
        [_Location_line]: 1431,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "thumbShape",
        [_Location_column]: 9,
        [_Location_line]: 1432,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tickShape",
        [_Location_column]: 9,
        [_Location_line]: 1433,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minorTickShape",
        [_Location_column]: 9,
        [_Location_line]: 1434,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipShape",
        [_Location_column]: 9,
        [_Location_line]: 1435,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sliderThemeData",
        [_Location_column]: 9,
        [_Location_line]: 1436,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "thumbIcon",
        [_Location_column]: 9,
        [_Location_line]: 1437,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipPosition",
        [_Location_column]: 9,
        [_Location_line]: 1438,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sliderType",
        [_Location_column]: 9,
        [_Location_line]: 1439,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "state",
        [_Location_column]: 9,
        [_Location_line]: 1440,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.constList([C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], widget_inspector._Location);
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[21] || CT.C21,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1397,
        [_Location_file]: "file:///Volumes/others/sdk/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_sliders-19.4.40/lib/src/slider.dart"
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: constants.ChildElements.prototype,
        [_name$]: "ChildElements.startThumbIcon",
        index: 0
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: constants.ChildElements.prototype,
        [_name$]: "ChildElements.endThumbIcon",
        index: 1
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: constants.ChildElements.prototype,
        [_name$]: "ChildElements.child",
        index: 2
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    }
  }, false);
  var C = Array(64).fill(void 0);
  var I = [
    "file:///Volumes/others/sdk/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_sliders-19.4.40/lib/src/slider.dart",
    "package:syncfusion_flutter_sliders/src/slider.dart"
  ];
  var _sliderType = dart.privateName(slider$, "SfSlider._sliderType");
  var _tooltipPosition = dart.privateName(slider$, "SfSlider._tooltipPosition");
  var min$ = dart.privateName(slider$, "SfSlider.min");
  var max$ = dart.privateName(slider$, "SfSlider.max");
  var value$ = dart.privateName(slider$, "SfSlider.value");
  var onChanged$ = dart.privateName(slider$, "SfSlider.onChanged");
  var onChangeStart$ = dart.privateName(slider$, "SfSlider.onChangeStart");
  var onChangeEnd$ = dart.privateName(slider$, "SfSlider.onChangeEnd");
  var interval$ = dart.privateName(slider$, "SfSlider.interval");
  var stepSize$ = dart.privateName(slider$, "SfSlider.stepSize");
  var stepDuration$ = dart.privateName(slider$, "SfSlider.stepDuration");
  var minorTicksPerInterval$ = dart.privateName(slider$, "SfSlider.minorTicksPerInterval");
  var showTicks$ = dart.privateName(slider$, "SfSlider.showTicks");
  var showLabels$ = dart.privateName(slider$, "SfSlider.showLabels");
  var showDividers$ = dart.privateName(slider$, "SfSlider.showDividers");
  var enableTooltip$ = dart.privateName(slider$, "SfSlider.enableTooltip");
  var shouldAlwaysShowTooltip$ = dart.privateName(slider$, "SfSlider.shouldAlwaysShowTooltip");
  var isInversed$ = dart.privateName(slider$, "SfSlider.isInversed");
  var inactiveColor$ = dart.privateName(slider$, "SfSlider.inactiveColor");
  var activeColor$ = dart.privateName(slider$, "SfSlider.activeColor");
  var labelPlacement$ = dart.privateName(slider$, "SfSlider.labelPlacement");
  var numberFormat$ = dart.privateName(slider$, "SfSlider.numberFormat");
  var dateFormat$ = dart.privateName(slider$, "SfSlider.dateFormat");
  var dateIntervalType$ = dart.privateName(slider$, "SfSlider.dateIntervalType");
  var labelFormatterCallback$ = dart.privateName(slider$, "SfSlider.labelFormatterCallback");
  var tooltipTextFormatterCallback$ = dart.privateName(slider$, "SfSlider.tooltipTextFormatterCallback");
  var semanticFormatterCallback$ = dart.privateName(slider$, "SfSlider.semanticFormatterCallback");
  var trackShape$ = dart.privateName(slider$, "SfSlider.trackShape");
  var dividerShape$ = dart.privateName(slider$, "SfSlider.dividerShape");
  var overlayShape$ = dart.privateName(slider$, "SfSlider.overlayShape");
  var thumbShape$ = dart.privateName(slider$, "SfSlider.thumbShape");
  var tickShape$ = dart.privateName(slider$, "SfSlider.tickShape");
  var minorTickShape$ = dart.privateName(slider$, "SfSlider.minorTickShape");
  var tooltipShape$ = dart.privateName(slider$, "SfSlider.tooltipShape");
  var thumbIcon$ = dart.privateName(slider$, "SfSlider.thumbIcon");
  var _name = dart.privateName(common, "_name");
  var _sliderType$ = dart.privateName(slider$, "_sliderType");
  var _tooltipPosition$ = dart.privateName(slider$, "_tooltipPosition");
  slider$.SfSlider = class SfSlider extends framework.StatefulWidget {
    get [_sliderType$]() {
      return this[_sliderType];
    }
    set [_sliderType$](value) {
      super[_sliderType$] = value;
    }
    get [_tooltipPosition$]() {
      return this[_tooltipPosition];
    }
    set [_tooltipPosition$](value) {
      super[_tooltipPosition$] = value;
    }
    get min() {
      return this[min$];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      super.max = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get onChanged() {
      return this[onChanged$];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get onChangeStart() {
      return this[onChangeStart$];
    }
    set onChangeStart(value) {
      super.onChangeStart = value;
    }
    get onChangeEnd() {
      return this[onChangeEnd$];
    }
    set onChangeEnd(value) {
      super.onChangeEnd = value;
    }
    get interval() {
      return this[interval$];
    }
    set interval(value) {
      super.interval = value;
    }
    get stepSize() {
      return this[stepSize$];
    }
    set stepSize(value) {
      super.stepSize = value;
    }
    get stepDuration() {
      return this[stepDuration$];
    }
    set stepDuration(value) {
      super.stepDuration = value;
    }
    get minorTicksPerInterval() {
      return this[minorTicksPerInterval$];
    }
    set minorTicksPerInterval(value) {
      super.minorTicksPerInterval = value;
    }
    get showTicks() {
      return this[showTicks$];
    }
    set showTicks(value) {
      super.showTicks = value;
    }
    get showLabels() {
      return this[showLabels$];
    }
    set showLabels(value) {
      super.showLabels = value;
    }
    get showDividers() {
      return this[showDividers$];
    }
    set showDividers(value) {
      super.showDividers = value;
    }
    get enableTooltip() {
      return this[enableTooltip$];
    }
    set enableTooltip(value) {
      super.enableTooltip = value;
    }
    get shouldAlwaysShowTooltip() {
      return this[shouldAlwaysShowTooltip$];
    }
    set shouldAlwaysShowTooltip(value) {
      super.shouldAlwaysShowTooltip = value;
    }
    get isInversed() {
      return this[isInversed$];
    }
    set isInversed(value) {
      super.isInversed = value;
    }
    get inactiveColor() {
      return this[inactiveColor$];
    }
    set inactiveColor(value) {
      super.inactiveColor = value;
    }
    get activeColor() {
      return this[activeColor$];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get labelPlacement() {
      return this[labelPlacement$];
    }
    set labelPlacement(value) {
      super.labelPlacement = value;
    }
    get numberFormat() {
      return this[numberFormat$];
    }
    set numberFormat(value) {
      super.numberFormat = value;
    }
    get dateFormat() {
      return this[dateFormat$];
    }
    set dateFormat(value) {
      super.dateFormat = value;
    }
    get dateIntervalType() {
      return this[dateIntervalType$];
    }
    set dateIntervalType(value) {
      super.dateIntervalType = value;
    }
    get labelFormatterCallback() {
      return this[labelFormatterCallback$];
    }
    set labelFormatterCallback(value) {
      super.labelFormatterCallback = value;
    }
    get tooltipTextFormatterCallback() {
      return this[tooltipTextFormatterCallback$];
    }
    set tooltipTextFormatterCallback(value) {
      super.tooltipTextFormatterCallback = value;
    }
    get semanticFormatterCallback() {
      return this[semanticFormatterCallback$];
    }
    set semanticFormatterCallback(value) {
      super.semanticFormatterCallback = value;
    }
    get trackShape() {
      return this[trackShape$];
    }
    set trackShape(value) {
      super.trackShape = value;
    }
    get dividerShape() {
      return this[dividerShape$];
    }
    set dividerShape(value) {
      super.dividerShape = value;
    }
    get overlayShape() {
      return this[overlayShape$];
    }
    set overlayShape(value) {
      super.overlayShape = value;
    }
    get thumbShape() {
      return this[thumbShape$];
    }
    set thumbShape(value) {
      super.thumbShape = value;
    }
    get tickShape() {
      return this[tickShape$];
    }
    set tickShape(value) {
      super.tickShape = value;
    }
    get minorTickShape() {
      return this[minorTickShape$];
    }
    set minorTickShape(value) {
      super.minorTickShape = value;
    }
    get tooltipShape() {
      return this[tooltipShape$];
    }
    set tooltipShape(value) {
      super.tooltipShape = value;
    }
    get thumbIcon() {
      return this[thumbIcon$];
    }
    set thumbIcon(value) {
      super.thumbIcon = value;
    }
    createState() {
      return new slider$._SfSliderState.new();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DiagnosticsProperty.new("value", this.value));
      properties.add(new diagnostics.DiagnosticsProperty.new("min", this.min));
      properties.add(new diagnostics.DiagnosticsProperty.new("max", this.max));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("isInversed", this.isInversed, {defaultValue: false}));
      properties.add(new (T.ObjectFlagPropertyOfdoubleTovoid()).new("onChanged", this.onChanged, {ifNull: "disabled"}));
      properties.add(new (T.ObjectFlagPropertyOfdynamicTovoid()).has("onChangeStart", this.onChangeStart));
      properties.add(new (T.ObjectFlagPropertyOfdynamicTovoid()).has("onChangeEnd", this.onChangeEnd));
      properties.add(new diagnostics.DoubleProperty.new("interval", this.interval));
      properties.add(new diagnostics.DoubleProperty.new("stepSize", this.stepSize));
      if (this.stepDuration != null) {
        properties.add(dart.nullCheck(this.stepDuration).toDiagnosticsNode({name: "stepDuration"}));
      }
      properties.add(new diagnostics.IntProperty.new("minorTicksPerInterval", this.minorTicksPerInterval));
      properties.add(new diagnostics.FlagProperty.new("showTicks", {value: this.showTicks, ifTrue: "Ticks are showing", ifFalse: "Ticks are not showing", showName: false}));
      properties.add(new diagnostics.FlagProperty.new("showLabels", {value: this.showLabels, ifTrue: "Labels are showing", ifFalse: "Labels are not showing", showName: false}));
      properties.add(new diagnostics.FlagProperty.new("showDividers", {value: this.showDividers, ifTrue: "Dividers are  showing", ifFalse: "Dividers are not showing", showName: false}));
      if (this.shouldAlwaysShowTooltip) {
        properties.add(new diagnostics.FlagProperty.new("shouldAlwaysShowTooltip", {value: this.shouldAlwaysShowTooltip, ifTrue: "Tooltip is always visible", showName: false}));
      } else {
        properties.add(new diagnostics.FlagProperty.new("enableTooltip", {value: this.enableTooltip, ifTrue: "Tooltip is enabled", ifFalse: "Tooltip is disabled", showName: false}));
      }
      properties.add(new colors.ColorProperty.new("activeColor", this.activeColor));
      properties.add(new colors.ColorProperty.new("inactiveColor", this.inactiveColor));
      properties.add(new (T.EnumPropertyOfLabelPlacement()).new("labelPlacement", this.labelPlacement));
      properties.add(new (T.DiagnosticsPropertyOfNumberFormat()).new("numberFormat", this.numberFormat));
      if (dart.runtimeType(this.value)._equals(dart.wrapType(core.DateTime)) && this.dateFormat != null) {
        properties.add(new diagnostics.StringProperty.new("dateFormat", "Formatted value is " + dart.nullCheck(this.dateFormat).format(core.DateTime.as(this.value))));
      }
      properties.add(new (T.EnumPropertyOfDateIntervalType()).new("dateIntervalType", this.dateIntervalType));
      properties.add(new (T.ObjectFlagPropertyOfdynamicAndStringToString()).has("tooltipTextFormatterCallback", this.tooltipTextFormatterCallback));
      properties.add(new (T.ObjectFlagPropertyOfdynamicAndStringToString()).has("labelFormatterCallback", this.labelFormatterCallback));
      properties.add(new (T.ObjectFlagPropertyOfdynamicTovoid()).has("semanticFormatterCallback", this.semanticFormatterCallback));
    }
  };
  (slider$.SfSlider.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let min = opts && 'min' in opts ? opts.min : 0;
    let max = opts && 'max' in opts ? opts.max : 1;
    let value = opts && 'value' in opts ? opts.value : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onChangeStart = opts && 'onChangeStart' in opts ? opts.onChangeStart : null;
    let onChangeEnd = opts && 'onChangeEnd' in opts ? opts.onChangeEnd : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
    let stepDuration = opts && 'stepDuration' in opts ? opts.stepDuration : null;
    let minorTicksPerInterval = opts && 'minorTicksPerInterval' in opts ? opts.minorTicksPerInterval : 0;
    let showTicks = opts && 'showTicks' in opts ? opts.showTicks : false;
    let showLabels = opts && 'showLabels' in opts ? opts.showLabels : false;
    let showDividers = opts && 'showDividers' in opts ? opts.showDividers : false;
    let enableTooltip = opts && 'enableTooltip' in opts ? opts.enableTooltip : false;
    let shouldAlwaysShowTooltip = opts && 'shouldAlwaysShowTooltip' in opts ? opts.shouldAlwaysShowTooltip : false;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : C[0] || CT.C0;
    let numberFormat = opts && 'numberFormat' in opts ? opts.numberFormat : null;
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let dateIntervalType = opts && 'dateIntervalType' in opts ? opts.dateIntervalType : null;
    let labelFormatterCallback = opts && 'labelFormatterCallback' in opts ? opts.labelFormatterCallback : null;
    let tooltipTextFormatterCallback = opts && 'tooltipTextFormatterCallback' in opts ? opts.tooltipTextFormatterCallback : null;
    let semanticFormatterCallback = opts && 'semanticFormatterCallback' in opts ? opts.semanticFormatterCallback : null;
    let trackShape = opts && 'trackShape' in opts ? opts.trackShape : C[1] || CT.C1;
    let dividerShape = opts && 'dividerShape' in opts ? opts.dividerShape : C[2] || CT.C2;
    let overlayShape = opts && 'overlayShape' in opts ? opts.overlayShape : C[3] || CT.C3;
    let thumbShape = opts && 'thumbShape' in opts ? opts.thumbShape : C[4] || CT.C4;
    let tickShape = opts && 'tickShape' in opts ? opts.tickShape : C[5] || CT.C5;
    let minorTickShape = opts && 'minorTickShape' in opts ? opts.minorTickShape : C[6] || CT.C6;
    let tooltipShape = opts && 'tooltipShape' in opts ? opts.tooltipShape : C[7] || CT.C7;
    let thumbIcon = opts && 'thumbIcon' in opts ? opts.thumbIcon : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[min$] = min;
    this[max$] = max;
    this[value$] = value;
    this[onChanged$] = onChanged;
    this[onChangeStart$] = onChangeStart;
    this[onChangeEnd$] = onChangeEnd;
    this[interval$] = interval;
    this[stepSize$] = stepSize;
    this[stepDuration$] = stepDuration;
    this[minorTicksPerInterval$] = minorTicksPerInterval;
    this[showTicks$] = showTicks;
    this[showLabels$] = showLabels;
    this[showDividers$] = showDividers;
    this[enableTooltip$] = enableTooltip;
    this[shouldAlwaysShowTooltip$] = shouldAlwaysShowTooltip;
    this[activeColor$] = activeColor;
    this[inactiveColor$] = inactiveColor;
    this[labelPlacement$] = labelPlacement;
    this[numberFormat$] = numberFormat;
    this[dateFormat$] = dateFormat;
    this[dateIntervalType$] = dateIntervalType;
    this[labelFormatterCallback$] = labelFormatterCallback;
    this[tooltipTextFormatterCallback$] = tooltipTextFormatterCallback;
    this[semanticFormatterCallback$] = semanticFormatterCallback;
    this[trackShape$] = trackShape;
    this[dividerShape$] = dividerShape;
    this[overlayShape$] = overlayShape;
    this[thumbShape$] = thumbShape;
    this[tickShape$] = tickShape;
    this[minorTickShape$] = minorTickShape;
    this[tooltipShape$] = tooltipShape;
    this[thumbIcon$] = thumbIcon;
    this[isInversed$] = false;
    this[_sliderType] = constants.SliderType.horizontal;
    this[_tooltipPosition] = null;
    if (!!dart.equals(min, max)) dart.assertFailed(null, I[0], 150, 16, "min != max");
    if (!(interval == null || dart.notNull(interval) > 0)) dart.assertFailed(null, I[0], 151, 16, "interval == null || interval > 0");
    slider$.SfSlider.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = slider$.SfSlider.prototype;
  (slider$.SfSlider.vertical = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let min = opts && 'min' in opts ? opts.min : 0;
    let max = opts && 'max' in opts ? opts.max : 1;
    let value = opts && 'value' in opts ? opts.value : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onChangeStart = opts && 'onChangeStart' in opts ? opts.onChangeStart : null;
    let onChangeEnd = opts && 'onChangeEnd' in opts ? opts.onChangeEnd : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
    let stepDuration = opts && 'stepDuration' in opts ? opts.stepDuration : null;
    let minorTicksPerInterval = opts && 'minorTicksPerInterval' in opts ? opts.minorTicksPerInterval : 0;
    let showTicks = opts && 'showTicks' in opts ? opts.showTicks : false;
    let showLabels = opts && 'showLabels' in opts ? opts.showLabels : false;
    let showDividers = opts && 'showDividers' in opts ? opts.showDividers : false;
    let enableTooltip = opts && 'enableTooltip' in opts ? opts.enableTooltip : false;
    let shouldAlwaysShowTooltip = opts && 'shouldAlwaysShowTooltip' in opts ? opts.shouldAlwaysShowTooltip : false;
    let isInversed = opts && 'isInversed' in opts ? opts.isInversed : false;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : C[0] || CT.C0;
    let numberFormat = opts && 'numberFormat' in opts ? opts.numberFormat : null;
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let dateIntervalType = opts && 'dateIntervalType' in opts ? opts.dateIntervalType : null;
    let labelFormatterCallback = opts && 'labelFormatterCallback' in opts ? opts.labelFormatterCallback : null;
    let tooltipTextFormatterCallback = opts && 'tooltipTextFormatterCallback' in opts ? opts.tooltipTextFormatterCallback : null;
    let semanticFormatterCallback = opts && 'semanticFormatterCallback' in opts ? opts.semanticFormatterCallback : null;
    let trackShape = opts && 'trackShape' in opts ? opts.trackShape : C[1] || CT.C1;
    let dividerShape = opts && 'dividerShape' in opts ? opts.dividerShape : C[2] || CT.C2;
    let overlayShape = opts && 'overlayShape' in opts ? opts.overlayShape : C[3] || CT.C3;
    let thumbShape = opts && 'thumbShape' in opts ? opts.thumbShape : C[4] || CT.C4;
    let tickShape = opts && 'tickShape' in opts ? opts.tickShape : C[5] || CT.C5;
    let minorTickShape = opts && 'minorTickShape' in opts ? opts.minorTickShape : C[6] || CT.C6;
    let tooltipShape = opts && 'tooltipShape' in opts ? opts.tooltipShape : C[7] || CT.C7;
    let thumbIcon = opts && 'thumbIcon' in opts ? opts.thumbIcon : null;
    let tooltipPosition = opts && 'tooltipPosition' in opts ? opts.tooltipPosition : C[8] || CT.C8;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[min$] = min;
    this[max$] = max;
    this[value$] = value;
    this[onChanged$] = onChanged;
    this[onChangeStart$] = onChangeStart;
    this[onChangeEnd$] = onChangeEnd;
    this[interval$] = interval;
    this[stepSize$] = stepSize;
    this[stepDuration$] = stepDuration;
    this[minorTicksPerInterval$] = minorTicksPerInterval;
    this[showTicks$] = showTicks;
    this[showLabels$] = showLabels;
    this[showDividers$] = showDividers;
    this[enableTooltip$] = enableTooltip;
    this[shouldAlwaysShowTooltip$] = shouldAlwaysShowTooltip;
    this[isInversed$] = isInversed;
    this[activeColor$] = activeColor;
    this[inactiveColor$] = inactiveColor;
    this[labelPlacement$] = labelPlacement;
    this[numberFormat$] = numberFormat;
    this[dateFormat$] = dateFormat;
    this[dateIntervalType$] = dateIntervalType;
    this[labelFormatterCallback$] = labelFormatterCallback;
    this[tooltipTextFormatterCallback$] = tooltipTextFormatterCallback;
    this[semanticFormatterCallback$] = semanticFormatterCallback;
    this[trackShape$] = trackShape;
    this[dividerShape$] = dividerShape;
    this[overlayShape$] = overlayShape;
    this[thumbShape$] = thumbShape;
    this[tickShape$] = tickShape;
    this[minorTickShape$] = minorTickShape;
    this[tooltipShape$] = tooltipShape;
    this[thumbIcon$] = thumbIcon;
    this[_sliderType] = constants.SliderType.vertical;
    this[_tooltipPosition] = tooltipPosition;
    if (!!slider_shapes.SfPaddleTooltipShape.is(tooltipShape)) dart.assertFailed(null, I[0], 234, 16, "tooltipShape is! SfPaddleTooltipShape");
    if (!!dart.equals(min, max)) dart.assertFailed(null, I[0], 235, 16, "min != max");
    if (!(interval == null || dart.notNull(interval) > 0)) dart.assertFailed(null, I[0], 236, 16, "interval == null || interval > 0");
    slider$.SfSlider.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = slider$.SfSlider.prototype;
  dart.addTypeTests(slider$.SfSlider);
  dart.addTypeCaches(slider$.SfSlider);
  dart.setMethodSignature(slider$.SfSlider, () => ({
    __proto__: dart.getMethods(slider$.SfSlider.__proto__),
    createState: dart.fnType(framework.State$(slider$.SfSlider), [])
  }));
  dart.setLibraryUri(slider$.SfSlider, I[1]);
  dart.setFieldSignature(slider$.SfSlider, () => ({
    __proto__: dart.getFields(slider$.SfSlider.__proto__),
    [_sliderType$]: dart.finalFieldType(constants.SliderType),
    [_tooltipPosition$]: dart.finalFieldType(dart.nullable(common.SliderTooltipPosition)),
    min: dart.finalFieldType(dart.dynamic),
    max: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    onChangeStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    onChangeEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    interval: dart.finalFieldType(dart.nullable(core.double)),
    stepSize: dart.finalFieldType(dart.nullable(core.double)),
    stepDuration: dart.finalFieldType(dart.nullable(common.SliderStepDuration)),
    minorTicksPerInterval: dart.finalFieldType(core.int),
    showTicks: dart.finalFieldType(core.bool),
    showLabels: dart.finalFieldType(core.bool),
    showDividers: dart.finalFieldType(core.bool),
    enableTooltip: dart.finalFieldType(core.bool),
    shouldAlwaysShowTooltip: dart.finalFieldType(core.bool),
    isInversed: dart.finalFieldType(core.bool),
    inactiveColor: dart.finalFieldType(dart.nullable(ui.Color)),
    activeColor: dart.finalFieldType(dart.nullable(ui.Color)),
    labelPlacement: dart.finalFieldType(common.LabelPlacement),
    numberFormat: dart.finalFieldType(dart.nullable(number_format.NumberFormat)),
    dateFormat: dart.finalFieldType(dart.nullable(date_format.DateFormat)),
    dateIntervalType: dart.finalFieldType(dart.nullable(common.DateIntervalType)),
    labelFormatterCallback: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.dynamic, core.String]))),
    tooltipTextFormatterCallback: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.dynamic, core.String]))),
    semanticFormatterCallback: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.dynamic]))),
    trackShape: dart.finalFieldType(slider_shapes.SfTrackShape),
    dividerShape: dart.finalFieldType(slider_shapes.SfDividerShape),
    overlayShape: dart.finalFieldType(slider_shapes.SfOverlayShape),
    thumbShape: dart.finalFieldType(slider_shapes.SfThumbShape),
    tickShape: dart.finalFieldType(slider_shapes.SfTickShape),
    minorTickShape: dart.finalFieldType(slider_shapes.SfTickShape),
    tooltipShape: dart.finalFieldType(slider_shapes.SfTooltipShape),
    thumbIcon: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  var ___SfSliderState_overlayController = dart.privateName(slider$, "_#_SfSliderState#overlayController");
  var ___SfSliderState_stateController = dart.privateName(slider$, "_#_SfSliderState#stateController");
  var ___SfSliderState_tooltipAnimationController = dart.privateName(slider$, "_#_SfSliderState#tooltipAnimationController");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _onChanged = dart.privateName(slider$, "_onChanged");
  var _onChangeStart = dart.privateName(slider$, "_onChangeStart");
  var _onChangeEnd = dart.privateName(slider$, "_onChangeEnd");
  var _getFormattedLabelText = dart.privateName(slider$, "_getFormattedLabelText");
  var _getFormattedTooltipText = dart.privateName(slider$, "_getFormattedTooltipText");
  var Color_value = dart.privateName(ui, "Color.value");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _getSliderThemeData = dart.privateName(slider$, "_getSliderThemeData");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(slider$.SfSlider) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(slider$.SfSlider)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(slider$.SfSlider));
  slider$._SfSliderState = class _SfSliderState extends State_TickerProviderStateMixin$36 {
    get overlayController() {
      let t0;
      t0 = this[___SfSliderState_overlayController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("overlayController")) : t0;
    }
    set overlayController(t0) {
      this[___SfSliderState_overlayController] = t0;
    }
    get stateController() {
      let t1;
      t1 = this[___SfSliderState_stateController];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("stateController")) : t1;
    }
    set stateController(t1) {
      this[___SfSliderState_stateController] = t1;
    }
    get tooltipAnimationController() {
      let t2;
      t2 = this[___SfSliderState_tooltipAnimationController];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("tooltipAnimationController")) : t2;
    }
    set tooltipAnimationController(t2) {
      this[___SfSliderState_tooltipAnimationController] = t2;
    }
    [_onChanged](value) {
      if (!dart.equals(value, this.widget.value)) {
        dart.nullCheck(this.widget.onChanged)(value);
      }
    }
    [_onChangeStart](value) {
      if (this.widget.onChangeStart != null) {
        dart.nullCheck(this.widget.onChangeStart)(value);
      }
    }
    [_onChangeEnd](value) {
      if (this.widget.onChangeEnd != null) {
        dart.nullCheck(this.widget.onChangeEnd)(value);
      }
    }
    [_getFormattedLabelText](actualText, formattedText) {
      return formattedText;
    }
    [_getFormattedTooltipText](actualText, formattedText) {
      return formattedText;
    }
    [_getSliderThemeData](themeData, isActive) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4, t3$5, t3$6, t3$7, t3$8, t3$9, t3$10, t3$11, t3$12, t3$13, t3$14, t3$15, t3$16, t3$17, t3$18, t3$19, t3$20, t3$21, t3$22, t3$23, t3$24, t3$25, t3$26, t3$27, t3$28, t3$29, t3$30, t3$31, t3$32, t3$33, t3$34, t3$35, t3$36;
      let sliderThemeData = slider_theme.SfSliderTheme.of(this.context);
      let minTrackHeight = math.min(core.double, sliderThemeData.activeTrackHeight, sliderThemeData.inactiveTrackHeight);
      let maxTrackHeight = math.max(core.double, sliderThemeData.activeTrackHeight, sliderThemeData.inactiveTrackHeight);
      sliderThemeData = sliderThemeData.copyWith({activeTrackHeight: sliderThemeData.activeTrackHeight, inactiveTrackHeight: sliderThemeData.inactiveTrackHeight, tickOffset: sliderThemeData.tickOffset, inactiveLabelStyle: (t3 = sliderThemeData.inactiveLabelStyle, t3 == null ? dart.nullCheck(themeData.textTheme.bodyText1).copyWith({color: isActive ? dart.nullCheck(dart.nullCheck(themeData.textTheme.bodyText1).color).withOpacity(0.87) : themeData.colorScheme.onSurface.withOpacity(0.32)}) : t3), activeLabelStyle: (t3$ = sliderThemeData.activeLabelStyle, t3$ == null ? dart.nullCheck(themeData.textTheme.bodyText1).copyWith({color: isActive ? dart.nullCheck(dart.nullCheck(themeData.textTheme.bodyText1).color).withOpacity(0.87) : themeData.colorScheme.onSurface.withOpacity(0.32)}) : t3$), tooltipTextStyle: (t3$0 = sliderThemeData.tooltipTextStyle, t3$0 == null ? dart.nullCheck(themeData.textTheme.bodyText1).copyWith({color: themeData.colorScheme.surface}) : t3$0), inactiveTrackColor: (t3$2 = (t3$1 = this.widget.inactiveColor, t3$1 == null ? sliderThemeData.inactiveTrackColor : t3$1), t3$2 == null ? themeData.colorScheme.primary.withOpacity(0.24) : t3$2), activeTrackColor: (t3$4 = (t3$3 = this.widget.activeColor, t3$3 == null ? sliderThemeData.activeTrackColor : t3$3), t3$4 == null ? themeData.colorScheme.primary : t3$4), thumbColor: (t3$6 = (t3$5 = this.widget.activeColor, t3$5 == null ? sliderThemeData.thumbColor : t3$5), t3$6 == null ? themeData.colorScheme.primary : t3$6), activeTickColor: (t3$7 = sliderThemeData.activeTickColor, t3$7 == null ? themeData.colorScheme.onSurface.withOpacity(0.37) : t3$7), inactiveTickColor: (t3$8 = sliderThemeData.inactiveTickColor, t3$8 == null ? themeData.colorScheme.onSurface.withOpacity(0.37) : t3$8), disabledActiveTickColor: (t3$9 = sliderThemeData.disabledActiveTickColor, t3$9 == null ? themeData.colorScheme.onSurface.withOpacity(0.24) : t3$9), disabledInactiveTickColor: (t3$10 = sliderThemeData.disabledInactiveTickColor, t3$10 == null ? themeData.colorScheme.onSurface.withOpacity(0.24) : t3$10), activeMinorTickColor: (t3$11 = sliderThemeData.activeMinorTickColor, t3$11 == null ? themeData.colorScheme.onSurface.withOpacity(0.37) : t3$11), inactiveMinorTickColor: (t3$12 = sliderThemeData.inactiveMinorTickColor, t3$12 == null ? themeData.colorScheme.onSurface.withOpacity(0.37) : t3$12), disabledActiveMinorTickColor: (t3$13 = sliderThemeData.disabledActiveMinorTickColor, t3$13 == null ? themeData.colorScheme.onSurface.withOpacity(0.24) : t3$13), disabledInactiveMinorTickColor: (t3$14 = sliderThemeData.disabledInactiveMinorTickColor, t3$14 == null ? themeData.colorScheme.onSurface.withOpacity(0.24) : t3$14), overlayColor: (t3$17 = (t3$16 = (t3$15 = this.widget.activeColor, t3$15 == null ? null : t3$15.withOpacity(0.12)), t3$16 == null ? sliderThemeData.overlayColor : t3$16), t3$17 == null ? themeData.colorScheme.primary.withOpacity(0.12) : t3$17), inactiveDividerColor: (t3$19 = (t3$18 = this.widget.activeColor, t3$18 == null ? sliderThemeData.inactiveDividerColor : t3$18), t3$19 == null ? themeData.colorScheme.primary.withOpacity(0.54) : t3$19), activeDividerColor: (t3$21 = (t3$20 = this.widget.inactiveColor, t3$20 == null ? sliderThemeData.activeDividerColor : t3$20), t3$21 == null ? themeData.colorScheme.onPrimary.withOpacity(0.54) : t3$21), disabledInactiveDividerColor: (t3$22 = sliderThemeData.disabledInactiveDividerColor, t3$22 == null ? themeData.colorScheme.onSurface.withOpacity(0.12) : t3$22), disabledActiveDividerColor: (t3$23 = sliderThemeData.disabledActiveDividerColor, t3$23 == null ? themeData.colorScheme.onPrimary.withOpacity(0.12) : t3$23), disabledActiveTrackColor: (t3$24 = sliderThemeData.disabledActiveTrackColor, t3$24 == null ? themeData.colorScheme.onSurface.withOpacity(0.32) : t3$24), disabledInactiveTrackColor: (t3$25 = sliderThemeData.disabledInactiveTrackColor, t3$25 == null ? themeData.colorScheme.onSurface.withOpacity(0.12) : t3$25), disabledThumbColor: (t3$26 = sliderThemeData.disabledThumbColor, t3$26 == null ? ui.Color.alphaBlend(themeData.colorScheme.onSurface.withOpacity(0.38), themeData.colorScheme.surface) : t3$26), tooltipBackgroundColor: (t3$27 = sliderThemeData.tooltipBackgroundColor, t3$27 == null ? themeData.brightness === ui.Brightness.light ? C[10] || CT.C10 : C[11] || CT.C11 : t3$27), thumbStrokeColor: sliderThemeData.thumbStrokeColor, activeDividerStrokeColor: sliderThemeData.activeDividerStrokeColor, inactiveDividerStrokeColor: sliderThemeData.inactiveDividerStrokeColor, trackCornerRadius: (t3$28 = sliderThemeData.trackCornerRadius, t3$28 == null ? maxTrackHeight / 2 : t3$28), thumbRadius: sliderThemeData.thumbRadius, overlayRadius: sliderThemeData.overlayRadius, activeDividerRadius: (t3$29 = sliderThemeData.activeDividerRadius, t3$29 == null ? minTrackHeight / 4 : t3$29), inactiveDividerRadius: (t3$30 = sliderThemeData.inactiveDividerRadius, t3$30 == null ? minTrackHeight / 4 : t3$30), thumbStrokeWidth: sliderThemeData.thumbStrokeWidth, activeDividerStrokeWidth: sliderThemeData.activeDividerStrokeWidth, inactiveDividerStrokeWidth: sliderThemeData.inactiveDividerStrokeWidth});
      if (this.widget[_sliderType$] === constants.SliderType.horizontal) {
        return sliderThemeData.copyWith({tickSize: (t3$31 = sliderThemeData.tickSize, t3$31 == null ? C[12] || CT.C12 : t3$31), minorTickSize: (t3$32 = sliderThemeData.minorTickSize, t3$32 == null ? C[13] || CT.C13 : t3$32), labelOffset: (t3$33 = sliderThemeData.labelOffset, t3$33 == null ? this.widget.showTicks ? C[14] || CT.C14 : C[15] || CT.C15 : t3$33)});
      } else {
        return sliderThemeData.copyWith({tickSize: (t3$34 = sliderThemeData.tickSize, t3$34 == null ? C[16] || CT.C16 : t3$34), minorTickSize: (t3$35 = sliderThemeData.minorTickSize, t3$35 == null ? C[17] || CT.C17 : t3$35), labelOffset: (t3$36 = sliderThemeData.labelOffset, t3$36 == null ? this.widget.showTicks ? C[18] || CT.C18 : C[19] || CT.C19 : t3$36)});
      }
    }
    didUpdateWidget(oldWidget) {
      slider$.SfSlider.as(oldWidget);
      if (oldWidget.shouldAlwaysShowTooltip !== this.widget.shouldAlwaysShowTooltip) {
        if (this.widget.shouldAlwaysShowTooltip) {
          this.tooltipAnimationController.value = 1.0;
        } else {
          this.tooltipAnimationController.value = 0.0;
        }
      }
      super.didUpdateWidget(oldWidget);
    }
    initState() {
      super.initState();
      this.overlayController = new animation_controller.AnimationController.new({vsync: this, duration: this.duration});
      this.stateController = new animation_controller.AnimationController.new({vsync: this, duration: this.duration});
      this.tooltipAnimationController = new animation_controller.AnimationController.new({vsync: this, duration: this.duration});
      this.stateController.value = this.widget.onChanged != null && !dart.equals(this.widget.min, this.widget.max) ? 1.0 : 0.0;
    }
    dispose() {
      this.overlayController.dispose();
      this.stateController.dispose();
      this.tooltipAnimationController.dispose();
      super.dispose();
    }
    build(context) {
      let t3, t3$, t3$0, t3$1, t3$2;
      let isActive = this.widget.onChanged != null && !dart.equals(this.widget.min, this.widget.max);
      let themeData = theme.Theme.of(context);
      return new slider$._SliderRenderObjectWidget.new({key: this.widget.key, min: this.widget.min, max: this.widget.max, value: this.widget.value, onChanged: isActive ? dart.bind(this, _onChanged) : null, onChangeStart: this.widget.onChangeStart != null ? dart.bind(this, _onChangeStart) : null, onChangeEnd: this.widget.onChangeEnd != null ? dart.bind(this, _onChangeEnd) : null, interval: this.widget.interval, stepSize: this.widget.stepSize, stepDuration: this.widget.stepDuration, minorTicksPerInterval: this.widget.minorTicksPerInterval, showTicks: this.widget.showTicks, showLabels: this.widget.showLabels, showDividers: this.widget.showDividers, enableTooltip: this.widget.enableTooltip, shouldAlwaysShowTooltip: this.widget.shouldAlwaysShowTooltip, isInversed: this.widget[_sliderType$] === constants.SliderType.horizontal && basic.Directionality.of(context) === ui.TextDirection.rtl || this.widget.isInversed, inactiveColor: (t3 = this.widget.inactiveColor, t3 == null ? themeData.primaryColor.withOpacity(0.24) : t3), activeColor: (t3$ = this.widget.activeColor, t3$ == null ? themeData.primaryColor : t3$), labelPlacement: this.widget.labelPlacement, numberFormat: (t3$0 = this.widget.numberFormat, t3$0 == null ? number_format.NumberFormat.new("#.##") : t3$0), dateIntervalType: this.widget.dateIntervalType, dateFormat: this.widget.dateFormat, labelFormatterCallback: (t3$1 = this.widget.labelFormatterCallback, t3$1 == null ? dart.bind(this, _getFormattedLabelText) : t3$1), tooltipTextFormatterCallback: (t3$2 = this.widget.tooltipTextFormatterCallback, t3$2 == null ? dart.bind(this, _getFormattedTooltipText) : t3$2), semanticFormatterCallback: this.widget.semanticFormatterCallback, trackShape: this.widget.trackShape, dividerShape: this.widget.dividerShape, overlayShape: this.widget.overlayShape, thumbShape: this.widget.thumbShape, tickShape: this.widget.tickShape, minorTickShape: this.widget.minorTickShape, tooltipShape: this.widget.tooltipShape, sliderThemeData: this[_getSliderThemeData](themeData, isActive), thumbIcon: this.widget.thumbIcon, tooltipPosition: this.widget[_tooltipPosition$], sliderType: this.widget[_sliderType$], state: this, $creationLocationd_0dea112b090073317d4: C[20] || CT.C20});
    }
  };
  (slider$._SfSliderState.new = function() {
    this[___SfSliderState_overlayController] = null;
    this[___SfSliderState_stateController] = null;
    this[___SfSliderState_tooltipAnimationController] = null;
    this.tooltipDelayTimer = null;
    this.duration = C[9] || CT.C9;
    slider$._SfSliderState.__proto__.new.call(this);
    ;
  }).prototype = slider$._SfSliderState.prototype;
  dart.addTypeTests(slider$._SfSliderState);
  dart.addTypeCaches(slider$._SfSliderState);
  dart.setMethodSignature(slider$._SfSliderState, () => ({
    __proto__: dart.getMethods(slider$._SfSliderState.__proto__),
    [_onChanged]: dart.fnType(dart.void, [dart.dynamic]),
    [_onChangeStart]: dart.fnType(dart.void, [dart.dynamic]),
    [_onChangeEnd]: dart.fnType(dart.void, [dart.dynamic]),
    [_getFormattedLabelText]: dart.fnType(core.String, [dart.dynamic, core.String]),
    [_getFormattedTooltipText]: dart.fnType(core.String, [dart.dynamic, core.String]),
    [_getSliderThemeData]: dart.fnType(slider_theme.SfSliderThemeData, [theme_data.ThemeData, core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(slider$._SfSliderState, () => ({
    __proto__: dart.getGetters(slider$._SfSliderState.__proto__),
    overlayController: animation_controller.AnimationController,
    stateController: animation_controller.AnimationController,
    tooltipAnimationController: animation_controller.AnimationController
  }));
  dart.setSetterSignature(slider$._SfSliderState, () => ({
    __proto__: dart.getSetters(slider$._SfSliderState.__proto__),
    overlayController: animation_controller.AnimationController,
    stateController: animation_controller.AnimationController,
    tooltipAnimationController: animation_controller.AnimationController
  }));
  dart.setLibraryUri(slider$._SfSliderState, I[1]);
  dart.setFieldSignature(slider$._SfSliderState, () => ({
    __proto__: dart.getFields(slider$._SfSliderState.__proto__),
    [___SfSliderState_overlayController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___SfSliderState_stateController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___SfSliderState_tooltipAnimationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    tooltipDelayTimer: dart.fieldType(dart.nullable(async.Timer)),
    duration: dart.finalFieldType(core.Duration)
  }));
  var sliderType$ = dart.privateName(slider$, "_SliderRenderObjectWidget.sliderType");
  var tooltipPosition$ = dart.privateName(slider$, "_SliderRenderObjectWidget.tooltipPosition");
  var min$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.min");
  var max$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.max");
  var value$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.value");
  var onChanged$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.onChanged");
  var onChangeStart$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.onChangeStart");
  var onChangeEnd$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.onChangeEnd");
  var interval$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.interval");
  var stepSize$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.stepSize");
  var stepDuration$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.stepDuration");
  var minorTicksPerInterval$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.minorTicksPerInterval");
  var showTicks$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.showTicks");
  var showLabels$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.showLabels");
  var showDividers$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.showDividers");
  var enableTooltip$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.enableTooltip");
  var isInversed$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.isInversed");
  var shouldAlwaysShowTooltip$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.shouldAlwaysShowTooltip");
  var inactiveColor$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.inactiveColor");
  var activeColor$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.activeColor");
  var labelPlacement$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.labelPlacement");
  var numberFormat$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.numberFormat");
  var dateIntervalType$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.dateIntervalType");
  var dateFormat$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.dateFormat");
  var sliderThemeData$ = dart.privateName(slider$, "_SliderRenderObjectWidget.sliderThemeData");
  var labelFormatterCallback$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.labelFormatterCallback");
  var tooltipTextFormatterCallback$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.tooltipTextFormatterCallback");
  var semanticFormatterCallback$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.semanticFormatterCallback");
  var dividerShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.dividerShape");
  var trackShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.trackShape");
  var tickShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.tickShape");
  var minorTickShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.minorTickShape");
  var overlayShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.overlayShape");
  var thumbShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.thumbShape");
  var tooltipShape$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.tooltipShape");
  var thumbIcon$0 = dart.privateName(slider$, "_SliderRenderObjectWidget.thumbIcon");
  var state$ = dart.privateName(slider$, "_SliderRenderObjectWidget.state");
  slider$._SliderRenderObjectWidget = class _SliderRenderObjectWidget extends framework.RenderObjectWidget {
    get sliderType() {
      return this[sliderType$];
    }
    set sliderType(value) {
      super.sliderType = value;
    }
    get tooltipPosition() {
      return this[tooltipPosition$];
    }
    set tooltipPosition(value) {
      super.tooltipPosition = value;
    }
    get min() {
      return this[min$0];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$0];
    }
    set max(value) {
      super.max = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get onChanged() {
      return this[onChanged$0];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get onChangeStart() {
      return this[onChangeStart$0];
    }
    set onChangeStart(value) {
      super.onChangeStart = value;
    }
    get onChangeEnd() {
      return this[onChangeEnd$0];
    }
    set onChangeEnd(value) {
      super.onChangeEnd = value;
    }
    get interval() {
      return this[interval$0];
    }
    set interval(value) {
      super.interval = value;
    }
    get stepSize() {
      return this[stepSize$0];
    }
    set stepSize(value) {
      super.stepSize = value;
    }
    get stepDuration() {
      return this[stepDuration$0];
    }
    set stepDuration(value) {
      super.stepDuration = value;
    }
    get minorTicksPerInterval() {
      return this[minorTicksPerInterval$0];
    }
    set minorTicksPerInterval(value) {
      super.minorTicksPerInterval = value;
    }
    get showTicks() {
      return this[showTicks$0];
    }
    set showTicks(value) {
      super.showTicks = value;
    }
    get showLabels() {
      return this[showLabels$0];
    }
    set showLabels(value) {
      super.showLabels = value;
    }
    get showDividers() {
      return this[showDividers$0];
    }
    set showDividers(value) {
      super.showDividers = value;
    }
    get enableTooltip() {
      return this[enableTooltip$0];
    }
    set enableTooltip(value) {
      super.enableTooltip = value;
    }
    get isInversed() {
      return this[isInversed$0];
    }
    set isInversed(value) {
      super.isInversed = value;
    }
    get shouldAlwaysShowTooltip() {
      return this[shouldAlwaysShowTooltip$0];
    }
    set shouldAlwaysShowTooltip(value) {
      super.shouldAlwaysShowTooltip = value;
    }
    get inactiveColor() {
      return this[inactiveColor$0];
    }
    set inactiveColor(value) {
      super.inactiveColor = value;
    }
    get activeColor() {
      return this[activeColor$0];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get labelPlacement() {
      return this[labelPlacement$0];
    }
    set labelPlacement(value) {
      super.labelPlacement = value;
    }
    get numberFormat() {
      return this[numberFormat$0];
    }
    set numberFormat(value) {
      super.numberFormat = value;
    }
    get dateIntervalType() {
      return this[dateIntervalType$0];
    }
    set dateIntervalType(value) {
      super.dateIntervalType = value;
    }
    get dateFormat() {
      return this[dateFormat$0];
    }
    set dateFormat(value) {
      super.dateFormat = value;
    }
    get sliderThemeData() {
      return this[sliderThemeData$];
    }
    set sliderThemeData(value) {
      super.sliderThemeData = value;
    }
    get labelFormatterCallback() {
      return this[labelFormatterCallback$0];
    }
    set labelFormatterCallback(value) {
      super.labelFormatterCallback = value;
    }
    get tooltipTextFormatterCallback() {
      return this[tooltipTextFormatterCallback$0];
    }
    set tooltipTextFormatterCallback(value) {
      super.tooltipTextFormatterCallback = value;
    }
    get semanticFormatterCallback() {
      return this[semanticFormatterCallback$0];
    }
    set semanticFormatterCallback(value) {
      super.semanticFormatterCallback = value;
    }
    get dividerShape() {
      return this[dividerShape$0];
    }
    set dividerShape(value) {
      super.dividerShape = value;
    }
    get trackShape() {
      return this[trackShape$0];
    }
    set trackShape(value) {
      super.trackShape = value;
    }
    get tickShape() {
      return this[tickShape$0];
    }
    set tickShape(value) {
      super.tickShape = value;
    }
    get minorTickShape() {
      return this[minorTickShape$0];
    }
    set minorTickShape(value) {
      super.minorTickShape = value;
    }
    get overlayShape() {
      return this[overlayShape$0];
    }
    set overlayShape(value) {
      super.overlayShape = value;
    }
    get thumbShape() {
      return this[thumbShape$0];
    }
    set thumbShape(value) {
      super.thumbShape = value;
    }
    get tooltipShape() {
      return this[tooltipShape$0];
    }
    set tooltipShape(value) {
      super.tooltipShape = value;
    }
    get thumbIcon() {
      return this[thumbIcon$0];
    }
    set thumbIcon(value) {
      super.thumbIcon = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    createElement() {
      return new slider$._RenderSliderElement.new(this);
    }
    createRenderObject(context) {
      return new slider$._RenderSlider.new({min: this.min, max: this.max, value: this.value, onChanged: this.onChanged, onChangeStart: this.onChangeStart, onChangeEnd: this.onChangeEnd, minorTicksPerInterval: this.minorTicksPerInterval, interval: this.interval, stepSize: this.stepSize, stepDuration: this.stepDuration, showTicks: this.showTicks, showLabels: this.showLabels, showDividers: this.showDividers, enableTooltip: this.enableTooltip, shouldAlwaysShowTooltip: this.shouldAlwaysShowTooltip, isInversed: this.isInversed, labelPlacement: this.labelPlacement, numberFormat: this.numberFormat, dateFormat: this.dateFormat, dateIntervalType: this.dateIntervalType, labelFormatterCallback: this.labelFormatterCallback, tooltipTextFormatterCallback: this.tooltipTextFormatterCallback, semanticFormatterCallback: this.semanticFormatterCallback, trackShape: this.trackShape, dividerShape: this.dividerShape, overlayShape: this.overlayShape, thumbShape: this.thumbShape, tickShape: this.tickShape, minorTickShape: this.minorTickShape, tooltipShape: this.tooltipShape, sliderThemeData: this.sliderThemeData, sliderType: this.sliderType, tooltipPosition: this.tooltipPosition, textDirection: basic.Directionality.of(context), mediaQueryData: media_query.MediaQuery.of(context), state: this.state});
    }
    updateRenderObject(context, renderObject) {
      let t3;
      slider$._RenderSlider.as(renderObject);
      t3 = renderObject;
      (() => {
        t3.min = this.min;
        t3.max = this.max;
        t3.value = this.value;
        t3.onChanged = this.onChanged;
        t3.onChangeStart = this.onChangeStart;
        t3.onChangeEnd = this.onChangeEnd;
        t3.interval = this.interval;
        t3.stepSize = this.stepSize;
        t3.stepDuration = this.stepDuration;
        t3.minorTicksPerInterval = this.minorTicksPerInterval;
        t3.showTicks = this.showTicks;
        t3.showLabels = this.showLabels;
        t3.showDividers = this.showDividers;
        t3.enableTooltip = this.enableTooltip;
        t3.shouldAlwaysShowTooltip = this.shouldAlwaysShowTooltip;
        t3.isInversed = this.isInversed;
        t3.labelPlacement = this.labelPlacement;
        t3.numberFormat = this.numberFormat;
        t3.dateFormat = this.dateFormat;
        t3.dateIntervalType = this.dateIntervalType;
        t3.labelFormatterCallback = this.labelFormatterCallback;
        t3.tooltipTextFormatterCallback = this.tooltipTextFormatterCallback;
        t3.semanticFormatterCallback = this.semanticFormatterCallback;
        t3.trackShape = this.trackShape;
        t3.dividerShape = this.dividerShape;
        t3.overlayShape = this.overlayShape;
        t3.thumbShape = this.thumbShape;
        t3.tickShape = this.tickShape;
        t3.minorTickShape = this.minorTickShape;
        t3.tooltipShape = this.tooltipShape;
        t3.sliderThemeData = this.sliderThemeData;
        t3.tooltipPosition = this.tooltipPosition;
        t3.textDirection = basic.Directionality.of(context);
        t3.mediaQueryData = media_query.MediaQuery.of(context);
        return t3;
      })();
    }
  };
  (slider$._SliderRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let min = opts && 'min' in opts ? opts.min : null;
    let max = opts && 'max' in opts ? opts.max : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onChangeStart = opts && 'onChangeStart' in opts ? opts.onChangeStart : null;
    let onChangeEnd = opts && 'onChangeEnd' in opts ? opts.onChangeEnd : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
    let stepDuration = opts && 'stepDuration' in opts ? opts.stepDuration : null;
    let minorTicksPerInterval = opts && 'minorTicksPerInterval' in opts ? opts.minorTicksPerInterval : null;
    let showTicks = opts && 'showTicks' in opts ? opts.showTicks : null;
    let showLabels = opts && 'showLabels' in opts ? opts.showLabels : null;
    let showDividers = opts && 'showDividers' in opts ? opts.showDividers : null;
    let enableTooltip = opts && 'enableTooltip' in opts ? opts.enableTooltip : null;
    let shouldAlwaysShowTooltip = opts && 'shouldAlwaysShowTooltip' in opts ? opts.shouldAlwaysShowTooltip : null;
    let isInversed = opts && 'isInversed' in opts ? opts.isInversed : null;
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : null;
    let numberFormat = opts && 'numberFormat' in opts ? opts.numberFormat : null;
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let dateIntervalType = opts && 'dateIntervalType' in opts ? opts.dateIntervalType : null;
    let labelFormatterCallback = opts && 'labelFormatterCallback' in opts ? opts.labelFormatterCallback : null;
    let tooltipTextFormatterCallback = opts && 'tooltipTextFormatterCallback' in opts ? opts.tooltipTextFormatterCallback : null;
    let semanticFormatterCallback = opts && 'semanticFormatterCallback' in opts ? opts.semanticFormatterCallback : null;
    let trackShape = opts && 'trackShape' in opts ? opts.trackShape : null;
    let dividerShape = opts && 'dividerShape' in opts ? opts.dividerShape : null;
    let overlayShape = opts && 'overlayShape' in opts ? opts.overlayShape : null;
    let thumbShape = opts && 'thumbShape' in opts ? opts.thumbShape : null;
    let tickShape = opts && 'tickShape' in opts ? opts.tickShape : null;
    let minorTickShape = opts && 'minorTickShape' in opts ? opts.minorTickShape : null;
    let tooltipShape = opts && 'tooltipShape' in opts ? opts.tooltipShape : null;
    let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
    let thumbIcon = opts && 'thumbIcon' in opts ? opts.thumbIcon : null;
    let state = opts && 'state' in opts ? opts.state : null;
    let sliderType = opts && 'sliderType' in opts ? opts.sliderType : null;
    let tooltipPosition = opts && 'tooltipPosition' in opts ? opts.tooltipPosition : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[min$0] = min;
    this[max$0] = max;
    this[value$0] = value;
    this[onChanged$0] = onChanged;
    this[onChangeStart$0] = onChangeStart;
    this[onChangeEnd$0] = onChangeEnd;
    this[interval$0] = interval;
    this[stepSize$0] = stepSize;
    this[stepDuration$0] = stepDuration;
    this[minorTicksPerInterval$0] = minorTicksPerInterval;
    this[showTicks$0] = showTicks;
    this[showLabels$0] = showLabels;
    this[showDividers$0] = showDividers;
    this[enableTooltip$0] = enableTooltip;
    this[shouldAlwaysShowTooltip$0] = shouldAlwaysShowTooltip;
    this[isInversed$0] = isInversed;
    this[inactiveColor$0] = inactiveColor;
    this[activeColor$0] = activeColor;
    this[labelPlacement$0] = labelPlacement;
    this[numberFormat$0] = numberFormat;
    this[dateFormat$0] = dateFormat;
    this[dateIntervalType$0] = dateIntervalType;
    this[labelFormatterCallback$0] = labelFormatterCallback;
    this[tooltipTextFormatterCallback$0] = tooltipTextFormatterCallback;
    this[semanticFormatterCallback$0] = semanticFormatterCallback;
    this[trackShape$0] = trackShape;
    this[dividerShape$0] = dividerShape;
    this[overlayShape$0] = overlayShape;
    this[thumbShape$0] = thumbShape;
    this[tickShape$0] = tickShape;
    this[minorTickShape$0] = minorTickShape;
    this[tooltipShape$0] = tooltipShape;
    this[sliderThemeData$] = sliderThemeData;
    this[thumbIcon$0] = thumbIcon;
    this[state$] = state;
    this[sliderType$] = sliderType;
    this[tooltipPosition$] = tooltipPosition;
    slider$._SliderRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = slider$._SliderRenderObjectWidget.prototype;
  dart.addTypeTests(slider$._SliderRenderObjectWidget);
  dart.addTypeCaches(slider$._SliderRenderObjectWidget);
  dart.setMethodSignature(slider$._SliderRenderObjectWidget, () => ({
    __proto__: dart.getMethods(slider$._SliderRenderObjectWidget.__proto__),
    createElement: dart.fnType(slider$._RenderSliderElement, []),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(slider$._SliderRenderObjectWidget, I[1]);
  dart.setFieldSignature(slider$._SliderRenderObjectWidget, () => ({
    __proto__: dart.getFields(slider$._SliderRenderObjectWidget.__proto__),
    sliderType: dart.finalFieldType(constants.SliderType),
    tooltipPosition: dart.finalFieldType(dart.nullable(common.SliderTooltipPosition)),
    min: dart.finalFieldType(dart.dynamic),
    max: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    onChangeStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    onChangeEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    interval: dart.finalFieldType(dart.nullable(core.double)),
    stepSize: dart.finalFieldType(dart.nullable(core.double)),
    stepDuration: dart.finalFieldType(dart.nullable(common.SliderStepDuration)),
    minorTicksPerInterval: dart.finalFieldType(core.int),
    showTicks: dart.finalFieldType(core.bool),
    showLabels: dart.finalFieldType(core.bool),
    showDividers: dart.finalFieldType(core.bool),
    enableTooltip: dart.finalFieldType(core.bool),
    isInversed: dart.finalFieldType(core.bool),
    shouldAlwaysShowTooltip: dart.finalFieldType(core.bool),
    inactiveColor: dart.finalFieldType(ui.Color),
    activeColor: dart.finalFieldType(ui.Color),
    labelPlacement: dart.finalFieldType(common.LabelPlacement),
    numberFormat: dart.finalFieldType(number_format.NumberFormat),
    dateIntervalType: dart.finalFieldType(dart.nullable(common.DateIntervalType)),
    dateFormat: dart.finalFieldType(dart.nullable(date_format.DateFormat)),
    sliderThemeData: dart.finalFieldType(slider_theme.SfSliderThemeData),
    labelFormatterCallback: dart.finalFieldType(dart.fnType(core.String, [dart.dynamic, core.String])),
    tooltipTextFormatterCallback: dart.finalFieldType(dart.fnType(core.String, [dart.dynamic, core.String])),
    semanticFormatterCallback: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.dynamic]))),
    dividerShape: dart.finalFieldType(slider_shapes.SfDividerShape),
    trackShape: dart.finalFieldType(slider_shapes.SfTrackShape),
    tickShape: dart.finalFieldType(slider_shapes.SfTickShape),
    minorTickShape: dart.finalFieldType(slider_shapes.SfTickShape),
    overlayShape: dart.finalFieldType(slider_shapes.SfOverlayShape),
    thumbShape: dart.finalFieldType(slider_shapes.SfThumbShape),
    tooltipShape: dart.finalFieldType(slider_shapes.SfTooltipShape),
    thumbIcon: dart.finalFieldType(dart.nullable(framework.Widget)),
    state: dart.finalFieldType(slider$._SfSliderState)
  }));
  var _slotToChild = dart.privateName(slider$, "_slotToChild");
  var _childToSlot = dart.privateName(slider$, "_childToSlot");
  var _updateChild = dart.privateName(slider$, "_updateChild");
  var _name$ = dart.privateName(constants, "_name");
  var _updateRenderObject = dart.privateName(slider$, "_updateRenderObject");
  slider$._RenderSliderElement = class _RenderSliderElement extends framework.RenderObjectElement {
    get widget() {
      return slider$._SliderRenderObjectWidget.as(super.widget);
    }
    get renderObject() {
      return slider$._RenderSlider.as(super.renderObject);
    }
    [_updateChild](widget, slot) {
      let oldChild = this[_slotToChild][$_get](slot);
      let newChild = this.updateChild(oldChild, widget, slot);
      if (oldChild != null) {
        this[_childToSlot][$remove](oldChild);
        this[_slotToChild][$remove](slot);
      }
      if (newChild != null) {
        this[_slotToChild][$_set](slot, newChild);
        this[_childToSlot][$_set](newChild, slot);
      }
    }
    [_updateRenderObject](child, slot) {
      switch (slot) {
        case C[60] || CT.C60:
        {
          this.renderObject.thumbIcon = T.RenderBoxN().as(child);
          break;
        }
        case C[61] || CT.C61:
        {
          break;
        }
        case C[62] || CT.C62:
        {
          break;
        }
      }
    }
    visitChildren(visitor) {
      this[_slotToChild][$values][$forEach](visitor);
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      this[_updateChild](this.widget.thumbIcon, constants.ChildElements.startThumbIcon);
    }
    update(newWidget) {
      slider$._SliderRenderObjectWidget.as(newWidget);
      super.update(newWidget);
      if (!this.widget._equals(newWidget)) dart.assertFailed(null, I[0], 1667, 12, "widget == newWidget");
      this[_updateChild](this.widget.thumbIcon, constants.ChildElements.startThumbIcon);
    }
    insertRenderObjectChild(child, slotValue) {
      object.RenderObject.as(child);
      constants.ChildElements.as(slotValue);
      if (!box.RenderBox.is(child)) dart.assertFailed(null, I[0], 1673, 12, "child is RenderBox");
      let slot = slotValue;
      this[_updateRenderObject](child, slot);
      if (!this.renderObject.childToSlot[$keys][$contains](child)) dart.assertFailed(null, I[0], 1676, 12, "renderObject.childToSlot.keys.contains(child)");
      if (!this.renderObject.slotToChild[$keys][$contains](slot)) dart.assertFailed(null, I[0], 1677, 12, "renderObject.slotToChild.keys.contains(slot)");
    }
    removeRenderObjectChild(child, slot) {
      object.RenderObject.as(child);
      constants.ChildElements.as(slot);
      if (!box.RenderBox.is(child)) dart.assertFailed(null, I[0], 1682, 12, "child is RenderBox");
      if (!this.renderObject.childToSlot[$keys][$contains](child)) dart.assertFailed(null, I[0], 1683, 12, "renderObject.childToSlot.keys.contains(child)");
      this[_updateRenderObject](null, dart.nullCheck(this.renderObject.childToSlot[$_get](child)));
      if (!!this.renderObject.childToSlot[$keys][$contains](child)) dart.assertFailed(null, I[0], 1685, 12, "!renderObject.childToSlot.keys.contains(child)");
      if (!!this.renderObject.slotToChild[$keys][$contains](slot)) dart.assertFailed(null, I[0], 1686, 12, "!renderObject.slotToChild.keys.contains(slot)");
    }
    moveRenderObjectChild(child, oldSlot, newSlot) {
      object.RenderObject.as(child);
      if (!false) dart.assertFailed("not reachable", I[0], 1692, 12, "false");
    }
  };
  (slider$._RenderSliderElement.new = function(slider) {
    this[_slotToChild] = new (T.LinkedMapOfChildElements$Element()).new();
    this[_childToSlot] = new (T.LinkedMapOfElement$ChildElements()).new();
    slider$._RenderSliderElement.__proto__.new.call(this, slider);
    ;
  }).prototype = slider$._RenderSliderElement.prototype;
  dart.addTypeTests(slider$._RenderSliderElement);
  dart.addTypeCaches(slider$._RenderSliderElement);
  dart.setMethodSignature(slider$._RenderSliderElement, () => ({
    __proto__: dart.getMethods(slider$._RenderSliderElement.__proto__),
    [_updateChild]: dart.fnType(dart.void, [dart.nullable(framework.Widget), constants.ChildElements]),
    [_updateRenderObject]: dart.fnType(dart.void, [dart.nullable(object.RenderObject), constants.ChildElements]),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic])
  }));
  dart.setGetterSignature(slider$._RenderSliderElement, () => ({
    __proto__: dart.getGetters(slider$._RenderSliderElement.__proto__),
    widget: slider$._SliderRenderObjectWidget,
    renderObject: slider$._RenderSlider
  }));
  dart.setLibraryUri(slider$._RenderSliderElement, I[1]);
  dart.setFieldSignature(slider$._RenderSliderElement, () => ({
    __proto__: dart.getFields(slider$._RenderSliderElement.__proto__),
    [_slotToChild]: dart.finalFieldType(core.Map$(constants.ChildElements, framework.Element)),
    [_childToSlot]: dart.finalFieldType(core.Map$(framework.Element, constants.ChildElements))
  }));
  var ___RenderSlider__overlayAnimation = dart.privateName(slider$, "_#_RenderSlider#_overlayAnimation");
  var ___RenderSlider__stateAnimation = dart.privateName(slider$, "_#_RenderSlider#_stateAnimation");
  var ___RenderSlider__tooltipAnimation = dart.privateName(slider$, "_#_RenderSlider#_tooltipAnimation");
  var ___RenderSlider__validForMouseTracker = dart.privateName(slider$, "_#_RenderSlider#_validForMouseTracker");
  var ___RenderSlider__newValue = dart.privateName(slider$, "_#_RenderSlider#_newValue");
  var ___RenderSlider__newValue_isSet = dart.privateName(slider$, "_#_RenderSlider#_newValue#isSet");
  var _valueInMilliseconds = dart.privateName(slider$, "_valueInMilliseconds");
  var _thumbIcon = dart.privateName(slider$, "_thumbIcon");
  var _state = dart.privateName(slider$, "_state");
  var _value = dart.privateName(slider$, "_value");
  var _semanticFormatterCallback = dart.privateName(slider$, "_semanticFormatterCallback");
  var _onDragStart = dart.privateName(slider$, "_onDragStart");
  var _onDragUpdate = dart.privateName(slider$, "_onDragUpdate");
  var _onDragEnd = dart.privateName(slider$, "_onDragEnd");
  var _onDragCancel = dart.privateName(slider$, "_onDragCancel");
  var _onVerticalDragStart = dart.privateName(slider$, "_onVerticalDragStart");
  var _onVerticalDragUpdate = dart.privateName(slider$, "_onVerticalDragUpdate");
  var _onVerticalDragEnd = dart.privateName(slider$, "_onVerticalDragEnd");
  var _onVerticalDragCancel = dart.privateName(slider$, "_onVerticalDragCancel");
  var _onTapDown = dart.privateName(slider$, "_onTapDown");
  var _onTapUp = dart.privateName(slider$, "_onTapUp");
  var _overlayAnimation = dart.privateName(slider$, "_overlayAnimation");
  var _stateAnimation = dart.privateName(slider$, "_stateAnimation");
  var _tooltipAnimation = dart.privateName(slider$, "_tooltipAnimation");
  var _validForMouseTracker = dart.privateName(slider$, "_validForMouseTracker");
  var _newValue = dart.privateName(slider$, "_newValue");
  var _increasedValue = dart.privateName(slider$, "_increasedValue");
  var _decreasedValue = dart.privateName(slider$, "_decreasedValue");
  var _beginInteraction = dart.privateName(slider$, "_beginInteraction");
  var _endInteraction = dart.privateName(slider$, "_endInteraction");
  var _updateValue = dart.privateName(slider$, "_updateValue");
  var _handleTooltipAnimationStatusChange = dart.privateName(slider$, "_handleTooltipAnimationStatusChange");
  var _drawTooltip = dart.privateName(slider$, "_drawTooltip");
  var _handleEnter = dart.privateName(slider$, "_handleEnter");
  var _handleExit = dart.privateName(slider$, "_handleExit");
  slider$._RenderSlider = class _RenderSlider extends slider_base.RenderBaseSlider {
    set [_overlayAnimation](t3) {
      this[___RenderSlider__overlayAnimation] = t3;
    }
    get [_overlayAnimation]() {
      let t4;
      t4 = this[___RenderSlider__overlayAnimation];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_overlayAnimation")) : t4;
    }
    get [_stateAnimation]() {
      let t4;
      t4 = this[___RenderSlider__stateAnimation];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_stateAnimation")) : t4;
    }
    set [_stateAnimation](t4) {
      this[___RenderSlider__stateAnimation] = t4;
    }
    get [_tooltipAnimation]() {
      let t5;
      t5 = this[___RenderSlider__tooltipAnimation];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_tooltipAnimation")) : t5;
    }
    set [_tooltipAnimation](t5) {
      this[___RenderSlider__tooltipAnimation] = t5;
    }
    get [_validForMouseTracker]() {
      let t6;
      t6 = this[___RenderSlider__validForMouseTracker];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_validForMouseTracker")) : t6;
    }
    set [_validForMouseTracker](t6) {
      this[___RenderSlider__validForMouseTracker] = t6;
    }
    get [_newValue]() {
      return this[___RenderSlider__newValue_isSet] ? this[___RenderSlider__newValue] : dart.throw(new _internal.LateError.fieldNI("_newValue"));
    }
    set [_newValue](t7) {
      this[___RenderSlider__newValue_isSet] = true;
      this[___RenderSlider__newValue] = t7;
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      if (dart.equals(this[_value], value)) {
        return;
      }
      this[_value] = value;
      if (this.isDateTime) {
        this[_valueInMilliseconds] = core.DateTime.as(this[_value]).millisecondsSinceEpoch[$toDouble]();
      }
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get onChanged() {
      return this[_onChanged];
    }
    set onChanged(value) {
      if (dart.equals(value, this[_onChanged])) {
        return;
      }
      let wasInteractive = this.isInteractive;
      this[_onChanged] = value;
      if (wasInteractive !== this.isInteractive) {
        if (this.isInteractive) {
          this[_state].stateController.forward();
        } else {
          this[_state].stateController.reverse();
        }
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    get semanticFormatterCallback() {
      return this[_semanticFormatterCallback];
    }
    set semanticFormatterCallback(value) {
      if (dart.equals(this[_semanticFormatterCallback], value)) {
        return;
      }
      this[_semanticFormatterCallback] = value;
      this.markNeedsSemanticsUpdate();
    }
    get thumbIcon() {
      return this[_thumbIcon];
    }
    set thumbIcon(value) {
      this[_thumbIcon] = this[_updateChild](this[_thumbIcon], value, constants.ChildElements.startThumbIcon);
    }
    get isInteractive() {
      return this.onChanged != null;
    }
    get actualValue() {
      return core.double.as(this.isDateTime ? this[_valueInMilliseconds] : dart.dsend(this[_value], 'toDouble', []));
    }
    get children() {
      return new (T.SyncIterableOfRenderBox()).new((function* children() {
        if (this[_thumbIcon] != null) {
          yield dart.nullCheck(this[_thumbIcon]);
        }
      }).bind(this));
    }
    get [_increasedValue]() {
      return this.getNextSemanticValue(this.value, this.semanticActionUnit, {actualValue: this.actualValue});
    }
    get [_decreasedValue]() {
      return this.getPrevSemanticValue(this.value, this.semanticActionUnit, {actualValue: this.actualValue});
    }
    [_updateChild](oldChild, newChild, slot) {
      if (oldChild != null) {
        this.dropChild(oldChild);
        this.childToSlot[$remove](oldChild);
        this.slotToChild[$remove](slot);
      }
      if (newChild != null) {
        this.childToSlot[$_set](newChild, slot);
        this.slotToChild[$_set](slot, newChild);
        this.adoptChild(newChild);
      }
      return newChild;
    }
    [_onTapDown](details) {
      this.currentPointerType = constants.PointerType.down;
      this.mainAxisOffset = this.sliderType === constants.SliderType.horizontal ? this.globalToLocal(details.globalPosition).dx : this.globalToLocal(details.globalPosition).dy;
      this[_beginInteraction]();
    }
    [_onTapUp](details) {
      this[_endInteraction]();
    }
    [_onDragStart](details) {
      this.mainAxisOffset = this.globalToLocal(details.globalPosition).dx;
      this[_beginInteraction]();
    }
    [_onDragUpdate](details) {
      this.isInteractionEnd = false;
      this.currentPointerType = constants.PointerType.move;
      this.mainAxisOffset = this.globalToLocal(details.globalPosition).dx;
      this[_updateValue]();
      this.markNeedsPaint();
    }
    [_onDragEnd](details) {
      this[_endInteraction]();
    }
    [_onDragCancel]() {
      this[_endInteraction]();
    }
    [_onVerticalDragStart](details) {
      this.mainAxisOffset = this.globalToLocal(details.globalPosition).dy;
      this[_beginInteraction]();
    }
    [_onVerticalDragUpdate](details) {
      this.isInteractionEnd = false;
      this.currentPointerType = constants.PointerType.move;
      this.mainAxisOffset = this.globalToLocal(details.globalPosition).dy;
      this[_updateValue]();
      this.markNeedsPaint();
    }
    [_onVerticalDragEnd](details) {
      this[_endInteraction]();
    }
    [_onVerticalDragCancel]() {
      this[_endInteraction]();
    }
    [_beginInteraction]() {
      let t8, t8$;
      this.isInteractionEnd = false;
      t8 = this.onChangeStart;
      t8 == null ? null : t8(this[_value]);
      this[_state].overlayController.forward();
      if (this.enableTooltip) {
        this.willDrawTooltip = true;
        this[_state].tooltipAnimationController.forward();
        t8$ = this[_state].tooltipDelayTimer;
        t8$ == null ? null : t8$.cancel();
        this[_state].tooltipDelayTimer = async.Timer.new(C[63] || CT.C63, dart.fn(() => {
          this[_state].tooltipDelayTimer = null;
          if (this.isInteractionEnd && this.willDrawTooltip && this[_state].tooltipAnimationController.status === animation.AnimationStatus.completed && !this.shouldAlwaysShowTooltip) {
            this[_state].tooltipAnimationController.reverse();
          }
        }, T.VoidTovoid()));
      }
      this[_updateValue]();
      this.markNeedsPaint();
    }
    [_updateValue]() {
      let factor = this.getFactorFromCurrentPosition();
      let valueFactor = dart.nullCheck(ui.lerpDouble(this.actualMin, this.actualMax, factor));
      this[_newValue] = this.getActualValue({valueInDouble: valueFactor});
      if (!dart.equals(this[_newValue], this[_value])) {
        dart.nullCheck(this.onChanged)(this[_newValue]);
      }
    }
    [_endInteraction]() {
      let t8;
      if (!this.isInteractionEnd) {
        this[_state].overlayController.reverse();
        if (this.enableTooltip && this[_state].tooltipDelayTimer == null && !this.shouldAlwaysShowTooltip) {
          this[_state].tooltipAnimationController.reverse();
          if (this[_state].tooltipAnimationController.status === animation.AnimationStatus.dismissed) {
            this.willDrawTooltip = false;
          }
        }
        this.currentPointerType = constants.PointerType.up;
        this.isInteractionEnd = true;
        t8 = this.onChangeEnd;
        t8 == null ? null : t8(this[_newValue]);
        this.markNeedsPaint();
      }
    }
    [_handleTooltipAnimationStatusChange](status) {
      if (status === animation.AnimationStatus.dismissed) {
        this.willDrawTooltip = false;
      }
    }
    [_drawTooltip](context, thumbCenter, offset, actualTrackOffset, trackRect) {
      let t8, t9, t8$;
      if (this.willDrawTooltip || this.shouldAlwaysShowTooltip) {
        let paint = (t8 = ui.Paint.new(), (() => {
          t8.color = dart.nullCheck(this.sliderThemeData.tooltipBackgroundColor);
          t8.style = ui.PaintingStyle.fill;
          t8.strokeWidth = 0.0;
          return t8;
        })());
        let actualText = this.sliderType === constants.SliderType.horizontal ? this.getValueFromPosition(thumbCenter.dx - offset.dx) : this.getValueFromPosition(trackRect.bottom - thumbCenter.dy);
        let tooltipText = (t8$ = actualText, t9 = this.getFormattedText(actualText), this.tooltipTextFormatterCallback(t8$, t9));
        let textSpan = new text_span.TextSpan.new({text: tooltipText, style: this.sliderThemeData.tooltipTextStyle});
        this.textPainter.text = textSpan;
        this.textPainter.layout();
        this.tooltipShape.paint(context, thumbCenter, new ui.Offset.new(actualTrackOffset.dx, this.tooltipStartY), this.textPainter, {parentBox: this, sliderThemeData: this.sliderThemeData, paint: paint, animation: this[_tooltipAnimation], trackRect: trackRect});
      }
    }
    increaseAction() {
      if (this.isInteractive) {
        dart.nullCheck(this.onChanged)(this[_increasedValue]);
      }
    }
    decreaseAction() {
      if (this.isInteractive) {
        dart.nullCheck(this.onChanged)(this[_decreasedValue]);
      }
    }
    [_handleEnter](event) {
      this[_state].overlayController.forward();
      if (this.enableTooltip) {
        this.willDrawTooltip = true;
        this[_state].tooltipAnimationController.forward();
      }
    }
    [_handleExit](event) {
      if (this[_state].mounted && this.currentPointerType !== constants.PointerType.move) {
        this[_state].overlayController.reverse();
        if (this.enableTooltip && !this.shouldAlwaysShowTooltip) {
          this[_state].tooltipAnimationController.reverse();
        }
      }
    }
    visitChildren(visitor) {
      this.children[$forEach](visitor);
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      super.attach(owner);
      this[_validForMouseTracker] = true;
      this[_overlayAnimation].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_stateAnimation].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_tooltipAnimation].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_tooltipAnimation].addStatusListener(dart.bind(this, _handleTooltipAnimationStatusChange));
      for (let child of this.children) {
        child.attach(owner);
      }
    }
    detach() {
      this[_validForMouseTracker] = false;
      this[_overlayAnimation].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_stateAnimation].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_tooltipAnimation].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_tooltipAnimation].removeStatusListener(dart.bind(this, _handleTooltipAnimationStatusChange));
      super.detach();
      for (let child of this.children) {
        child.detach();
      }
    }
    get cursor() {
      return mouse_cursor.MouseCursor.defer;
    }
    get onEnter() {
      return dart.bind(this, _handleEnter);
    }
    get onExit() {
      return dart.bind(this, _handleExit);
    }
    get validForMouseTracker() {
      return this[_validForMouseTracker];
    }
    performLayout() {
      let t8;
      super.performLayout();
      let contentConstraints = new box.BoxConstraints.tightFor({width: this.actualThumbSize.width, height: this.actualThumbSize.height});
      t8 = this[_thumbIcon];
      t8 == null ? null : t8.layout(contentConstraints, {parentUsesSize: true});
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.size.contains(position) && this.isInteractive) {
        if (this[_thumbIcon] != null && box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this[_thumbIcon]).parentData)).offset['&'](dart.nullCheck(this[_thumbIcon]).size).contains(position)) {
          let center = dart.nullCheck(this[_thumbIcon]).size.center(ui.Offset.zero);
          result.addWithRawTransform({transform: matrix_utils.MatrixUtils.forceToPoint(center), position: position, hitTest: dart.fn((result, position) => dart.nullCheck(this.thumbIcon).hitTest(result, {position: center}), T.BoxHitTestResultAndOffsetNTobool())});
        }
        result.add(new box.BoxHitTestEntry.new(this, position));
        return true;
      }
      return false;
    }
    paint(context, offset) {
      let actualTrackOffset = this.sliderType === constants.SliderType.horizontal ? new ui.Offset.new(offset.dx, offset.dy + (this.size.height - this.actualHeight) / 2 + this.trackOffset.dy - this.maxTrackHeight / 2) : new ui.Offset.new(offset.dx + (this.size.width - this.actualHeight) / 2 + this.trackOffset.dx - this.maxTrackHeight / 2, offset.dy);
      let trackRect = this.trackShape.getPreferredRect(this, this.sliderThemeData, actualTrackOffset);
      let thumbPosition = this.getFactorFromValue(this.actualValue) * (this.sliderType === constants.SliderType.horizontal ? trackRect.width : trackRect.height);
      let thumbCenter = this.sliderType === constants.SliderType.horizontal ? new ui.Offset.new(trackRect.left + thumbPosition, trackRect.center.dy) : new ui.Offset.new(trackRect.center.dx, trackRect.bottom - thumbPosition);
      this.trackShape.paint(context, actualTrackOffset, thumbCenter, null, null, {parentBox: this, currentValue: this[_value], currentValues: null, themeData: this.sliderThemeData, enableAnimation: this[_stateAnimation], textDirection: this.textDirection, activePaint: null, inactivePaint: null});
      if (this.showLabels || this.showTicks || this.showDividers) {
        this.drawLabelsTicksAndDividers(context, trackRect, offset, thumbCenter, null, null, this[_stateAnimation], this[_value], null);
      }
      this.overlayShape.paint(context, thumbCenter, {parentBox: this, currentValue: this[_value], themeData: this.sliderThemeData, animation: this[_overlayAnimation], thumb: null, paint: null});
      if (this[_thumbIcon] != null) {
        box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this[_thumbIcon]).parentData)).offset = thumbCenter['-'](new ui.Offset.new(dart.nullCheck(this[_thumbIcon]).size.width / 2, dart.nullCheck(this[_thumbIcon]).size.height / 2))['-'](offset);
      }
      this.thumbShape.paint(context, thumbCenter, {parentBox: this, child: this[_thumbIcon], currentValue: this[_value], themeData: this.sliderThemeData, enableAnimation: this[_stateAnimation], textDirection: this.textDirection, thumb: null, paint: null});
      this[_drawTooltip](context, thumbCenter, offset, actualTrackOffset, trackRect);
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = this.isInteractive;
      if (this.isInteractive) {
        config.textDirection = this.textDirection;
        config.onIncrease = dart.bind(this, 'increaseAction');
        config.onDecrease = dart.bind(this, 'decreaseAction');
        if (this.semanticFormatterCallback != null) {
          config.value = dart.nullCheck(this.semanticFormatterCallback)(this.value);
          config.increasedValue = dart.nullCheck(this.semanticFormatterCallback)(this[_increasedValue]);
          config.decreasedValue = dart.nullCheck(this.semanticFormatterCallback)(this[_decreasedValue]);
        } else {
          config.value = dart.str(this.value);
          config.increasedValue = dart.str(this[_increasedValue]);
          config.decreasedValue = dart.str(this[_decreasedValue]);
        }
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("thumbSize", this.thumbShape.getPreferredSize(this.sliderThemeData).toString()));
      properties.add(new diagnostics.StringProperty.new("activeDividerSize", this.dividerShape.getPreferredSize(this.sliderThemeData, {isActive: true}).toString()));
      properties.add(new diagnostics.StringProperty.new("inactiveDividerSize", this.dividerShape.getPreferredSize(this.sliderThemeData, {isActive: false}).toString()));
      properties.add(new diagnostics.StringProperty.new("overlaySize", this.overlayShape.getPreferredSize(this.sliderThemeData).toString()));
      properties.add(new diagnostics.StringProperty.new("tickSize", this.tickShape.getPreferredSize(this.sliderThemeData).toString()));
      properties.add(new diagnostics.StringProperty.new("minorTickSize", this.minorTickShape.getPreferredSize(this.sliderThemeData).toString()));
    }
  };
  (slider$._RenderSlider.new = function(opts) {
    let t3, t3$, t3$0;
    let min = opts && 'min' in opts ? opts.min : null;
    let max = opts && 'max' in opts ? opts.max : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onChangeStart = opts && 'onChangeStart' in opts ? opts.onChangeStart : null;
    let onChangeEnd = opts && 'onChangeEnd' in opts ? opts.onChangeEnd : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
    let stepDuration = opts && 'stepDuration' in opts ? opts.stepDuration : null;
    let minorTicksPerInterval = opts && 'minorTicksPerInterval' in opts ? opts.minorTicksPerInterval : null;
    let showTicks = opts && 'showTicks' in opts ? opts.showTicks : null;
    let showLabels = opts && 'showLabels' in opts ? opts.showLabels : null;
    let showDividers = opts && 'showDividers' in opts ? opts.showDividers : null;
    let enableTooltip = opts && 'enableTooltip' in opts ? opts.enableTooltip : null;
    let shouldAlwaysShowTooltip = opts && 'shouldAlwaysShowTooltip' in opts ? opts.shouldAlwaysShowTooltip : null;
    let isInversed = opts && 'isInversed' in opts ? opts.isInversed : null;
    let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : null;
    let numberFormat = opts && 'numberFormat' in opts ? opts.numberFormat : null;
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let dateIntervalType = opts && 'dateIntervalType' in opts ? opts.dateIntervalType : null;
    let labelFormatterCallback = opts && 'labelFormatterCallback' in opts ? opts.labelFormatterCallback : null;
    let tooltipTextFormatterCallback = opts && 'tooltipTextFormatterCallback' in opts ? opts.tooltipTextFormatterCallback : null;
    let semanticFormatterCallback = opts && 'semanticFormatterCallback' in opts ? opts.semanticFormatterCallback : null;
    let trackShape = opts && 'trackShape' in opts ? opts.trackShape : null;
    let dividerShape = opts && 'dividerShape' in opts ? opts.dividerShape : null;
    let overlayShape = opts && 'overlayShape' in opts ? opts.overlayShape : null;
    let thumbShape = opts && 'thumbShape' in opts ? opts.thumbShape : null;
    let tickShape = opts && 'tickShape' in opts ? opts.tickShape : null;
    let minorTickShape = opts && 'minorTickShape' in opts ? opts.minorTickShape : null;
    let tooltipShape = opts && 'tooltipShape' in opts ? opts.tooltipShape : null;
    let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
    let sliderType = opts && 'sliderType' in opts ? opts.sliderType : null;
    let tooltipPosition = opts && 'tooltipPosition' in opts ? opts.tooltipPosition : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let mediaQueryData = opts && 'mediaQueryData' in opts ? opts.mediaQueryData : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[___RenderSlider__overlayAnimation] = null;
    this[___RenderSlider__stateAnimation] = null;
    this[___RenderSlider__tooltipAnimation] = null;
    this[___RenderSlider__validForMouseTracker] = null;
    this[___RenderSlider__newValue] = null;
    this[___RenderSlider__newValue_isSet] = false;
    this[_valueInMilliseconds] = null;
    this.slotToChild = new (T.LinkedMapOfChildElements$RenderBox()).new();
    this.childToSlot = new (T.LinkedMapOfRenderBox$ChildElements()).new();
    this[_thumbIcon] = null;
    this.onChangeStart = onChangeStart;
    this.onChangeEnd = onChangeEnd;
    this[_state] = state;
    this[_value] = value;
    this[_semanticFormatterCallback] = semanticFormatterCallback;
    this[_onChanged] = onChanged;
    slider$._RenderSlider.__proto__.new.call(this, {min: min, max: max, sliderType: sliderType, interval: interval, stepSize: stepSize, stepDuration: stepDuration, minorTicksPerInterval: minorTicksPerInterval, showTicks: showTicks, showLabels: showLabels, showDividers: showDividers, enableTooltip: enableTooltip, shouldAlwaysShowTooltip: shouldAlwaysShowTooltip, isInversed: isInversed, labelPlacement: labelPlacement, numberFormat: numberFormat, dateFormat: dateFormat, dateIntervalType: dateIntervalType, labelFormatterCallback: labelFormatterCallback, tooltipTextFormatterCallback: tooltipTextFormatterCallback, trackShape: trackShape, dividerShape: dividerShape, overlayShape: overlayShape, thumbShape: thumbShape, tickShape: tickShape, minorTickShape: minorTickShape, tooltipShape: tooltipShape, tooltipPosition: tooltipPosition, sliderThemeData: sliderThemeData, textDirection: textDirection, mediaQueryData: mediaQueryData});
    let team = new team$.GestureArenaTeam.new();
    if (sliderType === constants.SliderType.horizontal) {
      this.horizontalDragGestureRecognizer = (t3 = new monodrag.HorizontalDragGestureRecognizer.new(), (() => {
        t3.team = team;
        t3.onStart = dart.bind(this, _onDragStart);
        t3.onUpdate = dart.bind(this, _onDragUpdate);
        t3.onEnd = dart.bind(this, _onDragEnd);
        t3.onCancel = dart.bind(this, _onDragCancel);
        return t3;
      })());
    }
    if (sliderType === constants.SliderType.vertical) {
      this.verticalDragGestureRecognizer = (t3$ = new monodrag.VerticalDragGestureRecognizer.new(), (() => {
        t3$.team = team;
        t3$.onStart = dart.bind(this, _onVerticalDragStart);
        t3$.onUpdate = dart.bind(this, _onVerticalDragUpdate);
        t3$.onEnd = dart.bind(this, _onVerticalDragEnd);
        t3$.onCancel = dart.bind(this, _onVerticalDragCancel);
        return t3$;
      })());
    }
    this.tapGestureRecognizer = (t3$0 = new tap.TapGestureRecognizer.new(), (() => {
      t3$0.team = team;
      t3$0.onTapDown = dart.bind(this, _onTapDown);
      t3$0.onTapUp = dart.bind(this, _onTapUp);
      return t3$0;
    })());
    this[_overlayAnimation] = new animations.CurvedAnimation.new({parent: this[_state].overlayController, curve: curves.Curves.fastOutSlowIn});
    this[_stateAnimation] = new animations.CurvedAnimation.new({parent: this[_state].stateController, curve: curves.Curves.easeInOut});
    this[_tooltipAnimation] = new animations.CurvedAnimation.new({parent: this[_state].tooltipAnimationController, curve: curves.Curves.fastOutSlowIn});
    if (shouldAlwaysShowTooltip) {
      this[_state].tooltipAnimationController.value = 1.0;
    }
    this.updateTextPainter();
    if (this.isDateTime) {
      this[_valueInMilliseconds] = core.DateTime.as(value).millisecondsSinceEpoch[$toDouble]();
    }
  }).prototype = slider$._RenderSlider.prototype;
  dart.addTypeTests(slider$._RenderSlider);
  dart.addTypeCaches(slider$._RenderSlider);
  slider$._RenderSlider[dart.implements] = () => [mouse_tracking.MouseTrackerAnnotation];
  dart.setMethodSignature(slider$._RenderSlider, () => ({
    __proto__: dart.getMethods(slider$._RenderSlider.__proto__),
    [_updateChild]: dart.fnType(dart.nullable(box.RenderBox), [dart.nullable(box.RenderBox), dart.nullable(box.RenderBox), constants.ChildElements]),
    [_onTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_onTapUp]: dart.fnType(dart.void, [tap.TapUpDetails]),
    [_onDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_onDragCancel]: dart.fnType(dart.void, []),
    [_onVerticalDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onVerticalDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onVerticalDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_onVerticalDragCancel]: dart.fnType(dart.void, []),
    [_beginInteraction]: dart.fnType(dart.void, []),
    [_updateValue]: dart.fnType(dart.void, []),
    [_endInteraction]: dart.fnType(dart.void, []),
    [_handleTooltipAnimationStatusChange]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [_drawTooltip]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Offset, ui.Offset, ui.Rect]),
    increaseAction: dart.fnType(dart.void, []),
    decreaseAction: dart.fnType(dart.void, []),
    [_handleEnter]: dart.fnType(dart.void, [events.PointerEnterEvent]),
    [_handleExit]: dart.fnType(dart.void, [events.PointerExitEvent])
  }));
  dart.setGetterSignature(slider$._RenderSlider, () => ({
    __proto__: dart.getGetters(slider$._RenderSlider.__proto__),
    [_overlayAnimation]: animation.Animation$(core.double),
    [_stateAnimation]: animation.Animation$(core.double),
    [_tooltipAnimation]: animation.Animation$(core.double),
    [_validForMouseTracker]: core.bool,
    [_newValue]: dart.dynamic,
    value: dart.dynamic,
    onChanged: dart.nullable(dart.fnType(dart.void, [dart.dynamic])),
    semanticFormatterCallback: dart.nullable(dart.fnType(core.String, [dart.dynamic])),
    thumbIcon: dart.nullable(box.RenderBox),
    actualValue: core.double,
    children: core.Iterable$(box.RenderBox),
    [_increasedValue]: dart.dynamic,
    [_decreasedValue]: dart.dynamic,
    cursor: mouse_cursor.MouseCursor,
    onEnter: dart.fnType(dart.void, [events.PointerEnterEvent]),
    onExit: dart.fnType(dart.void, [events.PointerExitEvent]),
    validForMouseTracker: core.bool
  }));
  dart.setSetterSignature(slider$._RenderSlider, () => ({
    __proto__: dart.getSetters(slider$._RenderSlider.__proto__),
    [_overlayAnimation]: animation.Animation$(core.double),
    [_stateAnimation]: animation.Animation$(core.double),
    [_tooltipAnimation]: animation.Animation$(core.double),
    [_validForMouseTracker]: core.bool,
    [_newValue]: dart.dynamic,
    value: dart.dynamic,
    onChanged: dart.nullable(dart.fnType(dart.void, [dart.dynamic])),
    semanticFormatterCallback: dart.nullable(dart.fnType(core.String, [dart.dynamic])),
    thumbIcon: dart.nullable(box.RenderBox)
  }));
  dart.setLibraryUri(slider$._RenderSlider, I[1]);
  dart.setFieldSignature(slider$._RenderSlider, () => ({
    __proto__: dart.getFields(slider$._RenderSlider.__proto__),
    [_state]: dart.finalFieldType(slider$._SfSliderState),
    [___RenderSlider__overlayAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RenderSlider__stateAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RenderSlider__tooltipAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RenderSlider__validForMouseTracker]: dart.fieldType(dart.nullable(core.bool)),
    [___RenderSlider__newValue]: dart.fieldType(dart.dynamic),
    [___RenderSlider__newValue_isSet]: dart.fieldType(core.bool),
    onChangeStart: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    onChangeEnd: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    [_valueInMilliseconds]: dart.fieldType(dart.nullable(core.double)),
    slotToChild: dart.finalFieldType(core.Map$(constants.ChildElements, box.RenderBox)),
    childToSlot: dart.finalFieldType(core.Map$(box.RenderBox, constants.ChildElements)),
    [_value]: dart.fieldType(dart.dynamic),
    [_onChanged]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic]))),
    [_semanticFormatterCallback]: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.dynamic]))),
    [_thumbIcon]: dart.fieldType(dart.nullable(box.RenderBox))
  }));
  dart.trackLibraries("packages/syncfusion_flutter_sliders/src/slider.dart", {
    "package:syncfusion_flutter_sliders/src/slider.dart": slider$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["slider.dart"],"names":[],"mappingsgPmB;;;;;;IAGY;;;;;;IAKf;;;;;;IAKA;;;;;;IAoDA;;;;;;IA0Be;;;;;;IAqCA;;;;;;IAoCA;;;;;;IAsEf;;;;;;IA4BA;;;;;;IA2CY;;;;;;IAoChB;;;;;;IAmCC;;;;;;IA8BA;;;;;;IAqCA;;;;;;IAmCA;;;;;;IAiCA;;;;;;IAwBA;;;;;;IA+BE;;;;;;IA8BA;;;;;;IA2BQ;;;;;;IA8BD;;;;;;IAuCF;;;;;;IAgCM;;;;;;IA+BM;;;;;;IAkCM;;;;;;IA6BK;;;;;;IAGtB;;;;;;IAGE;;;;;;IAGA;;;;;;IAGF;;;;;;IAGD;;;;;;IAGA;;;;;;IAyBG;;;;;;IAwCP;;;;;;;AAGmB;IAAgB;wBAGI;AACd,MAA/B,0BAAoB,UAAU;AACwB,MAA5D,AAAW,UAAD,KAAK,wCAA6B,SAAS;AACG,MAAxD,AAAW,UAAD,KAAK,wCAA6B,OAAO;AACK,MAAxD,AAAW,UAAD,KAAK,wCAA6B,OAAO;AAE1B,MADzB,AAAW,UAAD,KAAK,wCAA0B,cAAc,gCACrC;AAGM,MAFxB,AAAW,UAAD,KAAK,+CACX,aAAa,yBACL;AAEwB,MADpC,AAAW,UAAD,KAAK,gDACX,iBAAiB;AAEW,MADhC,AAAW,UAAD,KAAK,gDACX,eAAe;AACiC,MAApD,AAAW,UAAD,KAAK,mCAAe,YAAY;AACU,MAApD,AAAW,UAAD,KAAK,mCAAe,YAAY;AAC1C,UAAI;AACmE,QAArE,AAAW,UAAD,KAAiB,AAAE,eAAd,4CAAsC;;AAEoB,MAA3E,AAAW,UAAD,KAAK,gCAAY,yBAAyB;AAK/B,MAJrB,AAAW,UAAD,KAAK,iCAAa,qBACjB,wBACC,8BACC,mCACC;AAKO,MAJrB,AAAW,UAAD,KAAK,iCAAa,sBACjB,yBACC,+BACC,oCACC;AAKO,MAJrB,AAAW,UAAD,KAAK,iCAAa,wBACjB,2BACC,kCACC,sCACC;AACd,UAAI;AAImB,QAHrB,AAAW,UAAD,KAAK,iCAAa,mCACjB,sCACC,uCACE;;AAMO,QAJrB,AAAW,UAAD,KAAK,iCAAa,yBACjB,4BACC,+BACC,iCACC;;AAEyC,MAAzD,AAAW,UAAD,KAAK,6BAAc,eAAe;AACiB,MAA7D,AAAW,UAAD,KAAK,6BAAc,iBAAiB;AAE0B,MADxE,AACK,UADK,KACD,2CAA6B,kBAAkB;AAEiB,MADzE,AACK,UADK,KACD,gDAAkC,gBAAgB;AAC3D,UAAU,AAAY,iBAAlB,qDAAiC;AAEkC,QADrE,AAAW,UAAD,KAAK,mCACX,cAAc,AAAiD,wBAAjB,AAAE,eAAZ,yCAAmB;;AAGY,MADzE,AAAW,UAAD,KACN,6CAA+B,oBAAoB;AAEW,MADlE,AAAW,UAAD,KAAK,2DACX,gCAAgC;AAEkB,MADtD,AAAW,UAAD,KAAK,2DACX,0BAA0B;AAE8B,MAD5D,AAAW,UAAD,KAAK,gDACX,6BAA6B;IACnC;;;QA3kCU;QACD;QACA;QACS;QACA;QACT;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;IA/BA;IACA;IACS;IACA;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,oBAAE;IACD,oBAAa;IACR,yBAAE;SACR,aAAJ,GAAG,EAAI,GAAG;UACV,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;AACtC,oDAAW,GAAG;;EAAC;;QA6CX;QACD;QACA;QACS;QACA;QACT;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACiB;;IAjCjB;IACA;IACS;IACA;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAES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;;;;IACO;;;;;;;AAGmB,kDAAqB;IAAK;uBAGrB;AAC3C,YAAO,qCACE,eACA,iBACE,uBACI,+BACI,iCACF,yCACU,sCACb,yBACA,6BACI,8BACH,4BACC,+BACE,kCACC,6CACU,0CACb,iCACI,mCACF,+BACF,mCACM,+CACM,2DACM,8DACH,4CACf,+BACE,iCACA,+BACF,4BACD,gCACK,mCACF,oCACG,kCACL,kCACK,qCACa,wBAAG,OAAO,mBACb,0BAAG,OAAO,UAC9B;IACb;uBAGqC,SAAuB;;;AAmCf,WAlC3C,YAAY;MAAZ;AACI,iBAAM;AACN,iBAAM;AACN,mBAAQ;AACR,uBAAY;AACZ,2BAAgB;AAChB,yBAAc;AACd,sBAAW;AACX,sBAAW;AACX,0BAAe;AACf,mCAAwB;AACxB,uBAAY;AACZ,wBAAa;AACb,0BAAe;AACf,2BAAgB;AAChB,qCAA0B;AAC1B,wBAAa;AACb,4BAAiB;AACjB,0BAAe;AACf,wBAAa;AACb,8BAAmB;AACnB,oCAAyB;AACzB,0CAA+B;AAC/B,uCAA4B;AAC5B,wBAAa;AACb,0BAAe;AACf,0BAAe;AACf,wBAAa;AACb,uBAAY;AACZ,4BAAiB;AACjB,0BAAe;AACf,6BAAkB;AAClB,6BAAkB;AAClB,2BAA+B,wBAAG,OAAO;AACzC,4BAA4B,0BAAG,OAAO;;;IAC5C;;;QAlKU;QACQ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;IApCA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACZ,qEAAW,GAAG;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIjB,YAAa,sCAAP;IAAmC;;AAIX,YAAmB,0BAAb;IAA6B;mBAE3C,QAAsB;AAC/B,qBAAW,AAAY,0BAAC,IAAI;AAC5B,qBAAW,iBAAY,QAAQ,EAAE,MAAM,EAAE,IAAI;AAC5D,UAAI,QAAQ;AACmB,QAA7B,AAAa,4BAAO,QAAQ;AACH,QAAzB,AAAa,4BAAO,IAAI;;AAE1B,UAAI,QAAQ;AACmB,QAA7B,AAAY,0BAAC,IAAI,EAAI,QAAQ;AACA,QAA7B,AAAY,0BAAC,QAAQ,EAAI,IAAI;;IAEjC;0BAEuC,OAAqB;AAC1D,cAAQ,IAAI;;;AAGoC,UAA5C,AAAa,8BAAkB,kBAAN,KAAK;AAC9B;;;;AAEA;;;;AAEA;;;IAEN;kBAGkC;AACI,MAApC,AAAa,AAAO,sCAAQ,OAAO;IACrC;UAGoB,QAAgB;AACN,MAAtB,YAAM,MAAM,EAAE,OAAO;AACiC,MAA5D,mBAAa,AAAO,uBAAyB;IAC/C;;2CAGsC;AACb,MAAjB,aAAO,SAAS;AACtB,WAAO,AAAO,oBAAG,SAAS;AACkC,MAA5D,mBAAa,AAAO,uBAAyB;IAC/C;4BAG0C,OAAqB;6BAArB;iCAAqB;AAC7D,WAAa,iBAAN,KAAK;AACQ,iBAAO,SAAS;AACJ,MAAhC,0BAAoB,KAAK,EAAE,IAAI;AAC/B,WAAO,AAAa,AAAY,AAAK,gDAAS,KAAK;AACnD,WAAO,AAAa,AAAY,AAAK,gDAAS,IAAI;IACpD;4BAG0C,OAAqB;6BAArB;iCAAqB;AAC7D,WAAa,iBAAN,KAAK;AACZ,WAAO,AAAa,AAAY,AAAK,gDAAS,KAAK;AACQ,MAA3D,0BAAoB,MAAqC,eAA/B,AAAa,AAAW,qCAAC,KAAK;AACxD,WAAO,CAAC,AAAa,AAAY,AAAK,gDAAS,KAAK;AACpD,WAAO,CAAC,AAAa,AAAY,AAAK,gDAAS,IAAI;IACrD;0BAIiB,OAAe,SAAiB;6BAAhC;AACf,WAAO,yBAAO;IAChB;;+CAjF+C;IAEb,qBAAuC;IAEvC,qBAAuC;AAJhB,0DAAM,MAAM;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8M/C;IAAiB;;;AAAjB;;IAAiB;;;AAEjB;;IAAe;;AAAf;IAAe;;;AAEf;;IAAiB;;AAAjB;IAAiB;;;AAE9B;;IAAqB;;AAArB;IAAqB;;AAElB;IAAS;;AAAT;;IAAS;;AAcD;IAAM;cAGT;AAChB,UAAW,YAAP,cAAU,KAAK;AACjB;;AAGY,MAAd,eAAS,KAAK;AACd,UAAI;AAGwD,QAF1D,6BAEY,AAAa,AAAuB,iBAA3C;;AAES,MAAhB;AAC0B,MAA1B;IACF;;AAEwC;IAAU;kBAGb;AACnC,UAAU,YAAN,KAAK,EAAI;AACX;;AAES,2BAAiB;AACV,MAAlB,mBAAa,KAAK;AAClB,UAAI,cAAc,KAAI;AACpB,YAAI;AAC8B,UAAhC,AAAO,AAAgB;;AAES,UAAhC,AAAO,AAAgB;;AAET,QAAhB;AAC0B,QAA1B;;IAEJ;;AAGI;IAA0B;kCAGmC;AAC/D,UAA+B,YAA3B,kCAA8B,KAAK;AACrC;;AAEgC,MAAlC,mCAA6B,KAAK;AACR,MAA1B;IACF;;AAE4B;IAAU;kBAGb;AACmD,MAA1E,mBAAa,mBAAa,kBAAY,KAAK,EAAgB;IAC7D;;AAG0B,YAAA,AAAU;IAAO;;AAIvC,YAAwD,gBAAvD,kBAAa,6BAA8B,WAAP;IAA4B;;AAGpC;AAC/B,YAAI;AACF,gBAAgB,eAAV;;MAEV;;;AAGE,YAAO,2BAAqB,YAAO,uCAClB;IACnB;;AAGE,YAAO,2BAAqB,YAAO,uCAClB;IACnB;mBAGe,UAAqB,UAAwB;AAC1D,UAAI,QAAQ;AACS,QAAnB,eAAU,QAAQ;AACU,QAA5B,AAAY,0BAAO,QAAQ;AACH,QAAxB,AAAY,0BAAO,IAAI;;AAEzB,UAAI,QAAQ;AACkB,QAA5B,AAAW,wBAAC,QAAQ,EAAI,IAAI;AACA,QAA5B,AAAW,wBAAC,IAAI,EAAI,QAAQ;AACR,QAApB,gBAAW,QAAQ;;AAErB,YAAO,SAAQ;IACjB;iBAE+B;AACQ,MAArC,0BAAiC;AAGa,MAF9C,sBAAiB,AAAW,oBAAc,kCACpC,AAAsC,mBAAxB,AAAQ,OAAD,sBACrB,AAAsC,mBAAxB,AAAQ,OAAD;AACR,MAAnB;IACF;eAE2B;AACR,MAAjB;IACF;mBAEmC;AACwB,MAAzD,sBAAiB,AAAsC,mBAAxB,AAAQ,OAAD;AACnB,MAAnB;IACF;oBAEqC;AACX,MAAxB,wBAAmB;AACkB,MAArC,0BAAiC;AACwB,MAAzD,sBAAiB,AAAsC,mBAAxB,AAAQ,OAAD;AACxB,MAAd;AACgB,MAAhB;IACF;iBAE+B;AACZ,MAAjB;IACF;;AAGmB,MAAjB;IACF;2BAE2C;AACgB,MAAzD,sBAAiB,AAAsC,mBAAxB,AAAQ,OAAD;AACnB,MAAnB;IACF;4BAE6C;AACnB,MAAxB,wBAAmB;AACkB,MAArC,0BAAiC;AACwB,MAAzD,sBAAiB,AAAsC,mBAAxB,AAAQ,OAAD;AACxB,MAAd;AACgB,MAAhB;IACF;yBAEuC;AACpB,MAAjB;IACF;;AAGmB,MAAjB;IACF;;;AAG0B,MAAxB,wBAAmB;AACQ,WAA3B;0BAAe,GAAK;AACc,MAAlC,AAAO,AAAkB;AACzB,UAAI;AACoB,QAAtB,uBAAkB;AACyB,QAA3C,AAAO,AAA2B;AACA,cAAlC,AAAO;sBAAA,OAAmB;AAUxB,QATF,AAAO,iCAAoB,iCAAyC;AACnC,UAA/B,AAAO,iCAAoB;AAC3B,cAAI,yBACA,wBACA,AAAO,AAA2B,AAAO,mDACrB,wCACnB;AACwC,YAA3C,AAAO,AAA2B;;;;AAK1B,MAAd;AACgB,MAAhB;IACF;;AAGe,mBAAS;AACT,wBAAsD,eAAxC,cAAW,gBAAW,gBAAW,MAAM;AACZ,MAAtD,kBAAY,oCAA8B,WAAW;AAErD,uBAAI,iBAAa;AACM,QAAZ,AAAC,eAAV,gBAAW;;IAEf;;;AAGE,WAAK;AAC+B,QAAlC,AAAO,AAAkB;AACzB,YAAI,sBACA,AAAO,AAAkB,2CACxB;AACwC,UAA3C,AAAO,AAA2B;AAClC,cAAI,AAAO,AAA2B,AAAO,mDACzB;AACK,YAAvB,uBAAkB;;;AAIa,QAAnC,0BAAiC;AACV,QAAvB,wBAAmB;AACS,aAA5B;4BAAa,GAAK;AACF,QAAhB;;IAEJ;0CAEyD;AACvD,UAAI,AAAO,MAAD,KAAoB;AACL,QAAvB,uBAAkB;;IAEtB;mBAEkC,SAAgB,aAAoB,QAC3D,mBAAwB;;AACjC,UAAI,wBAAmB;AACT,0CAAQ;AAChB,qBAA8C,eAAtC,AAAgB;AACxB,qBAAsB;AACtB,2BAAc;;;AAEJ,yBAAa,AAAW,oBAAc,kCAC9C,0BAAqB,AAAY,AAAG,WAAJ,MAAM,AAAO,MAAD,OAC5C,0BAAqB,AAAU,AAAO,SAAR,UAAU,AAAY,WAAD;AAC5C,iCACT,UAAU,OAAE,sBAAiB,UAAU,GADhB,AAA4B;AAExC,uBACX,kCAAe,WAAW,SAAS,AAAgB;AAC5B,QAA3B,AAAY,wBAAO,QAAQ;AACP,QAApB,AAAY;AAQa,QANzB,AAAa,wBAAM,OAAO,EAAE,WAAW,EACnC,kBAAO,AAAkB,iBAAD,KAAK,qBAAgB,8BAClC,uBACM,6BACV,KAAK,aACD,oCACA,SAAS;;IAE5B;;AAGE,UAAI;AACyB,QAAlB,AAAC,eAAV,gBAAW;;IAEf;;AAGE,UAAI;AACyB,QAAlB,AAAC,eAAV,gBAAW;;IAEf;mBAEoC;AACA,MAAlC,AAAO,AAAkB;AACzB,UAAI;AACoB,QAAtB,uBAAkB;AACyB,QAA3C,AAAO,AAA2B;;IAEtC;kBAEkC;AAGhC,UAAI,AAAO,wBAAW,4BAAkC;AACpB,QAAlC,AAAO,AAAkB;AACzB,YAAI,uBAAkB;AACuB,UAA3C,AAAO,AAA2B;;;IAGxC;kBAGuC;AACZ,MAAzB,AAAS,wBAAQ,OAAO;IAC1B;;8BAG0B;AACL,MAAb,aAAO,KAAK;AACU,MAA5B,8BAAwB;AACqB,MAA7C,AAAkB,8CAAY;AACa,MAA3C,AAAgB,4CAAY;AACiB,MAA7C,AAAkB,8CAAY;AAC0C,MAAxE,AAAkB,oDAAkB;AACpC,eAAqB,QAAS;AACT,QAAnB,AAAM,KAAD,QAAQ,KAAK;;IAEtB;;AAI+B,MAA7B,8BAAwB;AACwB,MAAhD,AAAkB,iDAAe;AACa,MAA9C,AAAgB,+CAAe;AACiB,MAAhD,AAAkB,iDAAe;AAC0C,MAA3E,AAAkB,uDAAqB;AACzB,MAAR;AACN,eAAqB,QAAS;AACd,QAAd,AAAM,KAAD;;IAET;;AAG0B,YAAY;IAAK;;AAGF;IAAY;;AAGd;IAAW;;AAGjB;IAAqB;;;AAI/B,MAAf;AACe,+BAAoC,wCAC9C,AAAgB,oCAAe,AAAgB;AACE,WAA5D;0BAAY,UAAO,kBAAkB,mBAAkB;IACzD;YAG8B;UAAyB;AACrD,UAAI,AAAK,mBAAS,QAAQ,KAAK;AAC7B,YAAI,4BAC0B,AAAkB,AAAO,AAC9C,qBADmB,eAAZ,AAAE,eAAZ,2CAA6D,AAAE,eAAZ,iCACvC,QAAQ;AACX,uBAAmB,AAAE,AAAK,eAAjB,8BAA+B;AAOpD,UAND,AAAO,MAAD,iCACmB,sCAAa,MAAM,aAChC,QAAQ,WACT,SAAkB,QAAgB,aACzB,AAAE,eAAX,wBAAmB,MAAM,aAAY,MAAM;;AAIb,QAA3C,AAAO,MAAD,KAAK,4BAAgB,MAAM,QAAQ;AACzC,cAAO;;AAGT,YAAO;IACT;UAG2B,SAAgB;AAC5B,8BAAoB,AAAW,oBAAc,kCACpD,kBACE,AAAO,MAAD,KACN,AAAO,AAAG,AAC2B,AAClB,MAFb,MAC2B,CAA5B,AAAK,AAAO,mBAAE,qBAAgB,IAC/B,AAAY,sBACZ,AAAe,sBAAE,KACvB,kBACE,AAAO,AAAG,AAC0B,AACjB,MAFb,MAC0B,CAA3B,AAAK,AAAM,kBAAE,qBAAgB,IAC9B,AAAY,sBACZ,AAAe,sBAAE,GACrB,AAAO,MAAD;AAGH,sBACP,AAAW,iCAAiB,MAAM,sBAAiB,iBAAiB;AAC3D,0BAAgB,AAAgC,wBAAb,qBAC3C,AAAW,oBAAc,kCACpB,AAAU,SAAD,SACT,AAAU,SAAD;AACN,wBAAc,AAAW,oBAAc,kCAC9C,kBAAO,AAAU,AAAK,SAAN,QAAQ,aAAa,EAAE,AAAU,AAAO,SAAR,cAChD,kBAAO,AAAU,AAAO,SAAR,YAAY,AAAU,AAAO,SAAR,UAAU,aAAa;AAU1C,MARxB,AAAW,sBAAM,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,kBACjD,oBACG,6BACC,iBACJ,uCACM,sCACF,iCACF,qBACE;AAEnB,UAAI,mBAAc,kBAAa;AAEW,QADxC,gCAA2B,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,MAChE,MAAM,uBAAiB,cAAQ;;AAUrB,MANhB,AAAa,wBAAM,OAAO,EAAE,WAAW,cACxB,oBACG,yBACH,iCACA,gCACJ,aACA;AAEX,UAAI;AAGQ,QAFe,AAAkB,qBAApB,eAAZ,AAAE,eAAZ,wCAAmD,AAAY,AACI,WADL,MAC3D,kBAAiB,AAAE,AAAK,AAAM,eAAvB,+BAAyB,GAAa,AAAE,AAAK,AAAO,eAAxB,gCAA0B,SAC7D,MAAM;;AAWI,MARhB,AAAW,sBAAM,OAAO,EAAE,WAAW,cACtB,aACJ,gCACO,yBACH,uCACM,sCACF,2BACR,aACA;AAE6D,MAAxE,mBAAa,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,iBAAiB,EAAE,SAAS;IACzE;mCAG2D;AACb,MAAtC,qCAA+B,MAAM;AACF,MAAzC,AAAO,MAAD,sBAAsB;AAC5B,UAAI;AACkC,QAApC,AAAO,MAAD,iBAAiB;AACW,QAAlC,AAAO,MAAD,wBAAc;AACc,QAAlC,AAAO,MAAD,wBAAc;AACpB,YAAI;AAC8C,UAAhD,AAAO,MAAD,SAAkC,AAAC,eAA1B,gCAA2B;AACyB,UAAnE,AAAO,MAAD,kBAA2C,AAAC,eAA1B,gCAA2B;AACgB,UAAnE,AAAO,MAAD,kBAA2C,AAAC,eAA1B,gCAA2B;;AAE5B,UAAvB,AAAO,MAAD,SAAiB,SAAN;AACyB,UAA1C,AAAO,MAAD,kBAAoC,SAAhB;AACgB,UAA1C,AAAO,MAAD,kBAAoC,SAAhB;;;IAGhC;wBAGqD;AACd,MAA/B,0BAAoB,UAAU;AAEsC,MAD1E,AAAW,UAAD,KAAK,mCACX,aAAa,AAAW,AAAkC,iCAAjB;AAKxB,MAJrB,AAAW,UAAD,KAAK,mCACX,qBACA,AACK,AACA,mCADiB,iCAA2B;AAMhC,MAJrB,AAAW,UAAD,KAAK,mCACX,uBACA,AACK,AACA,mCADiB,iCAA2B;AAGU,MAD/D,AAAW,UAAD,KAAK,mCAAe,eAC1B,AAAa,AAAkC,mCAAjB;AAEsC,MADxE,AAAW,UAAD,KAAK,mCACX,YAAY,AAAU,AAAkC,gCAAjB;AAEsB,MADjE,AAAW,UAAD,KAAK,mCAAe,iBAC1B,AAAe,AAAkC,qCAAjB;IACtC;;;;QAnlBmB;QACA;QACA;QACe;QAClB;QACA;QACG;QACA;QACY;QAChB;QACC;QACA;QACA;QACA;QACA;QACA;QACU;QACF;QACD;QACM;QACK;QACM;QACM;QACtB;QACE;QACA;QACF;QACD;QACA;QACG;QACG;QACP;QACY;QACT;QACC;QACA;8CAqFH;4CAEA;8CAEA;kDAEb;sCAEG;;IAML;IAE4B,mBACN;IAEM,mBACN;IAqDnB;IA7LK;IACA;IA+BH,eAAE,KAAK;IACP,eAAE,KAAK;IACa,mCAAE,yBAAyB;IAC3C,mBAAE,SAAS;AACtB,yDACO,GAAG,OACH,GAAG,cACI,UAAU,YACZ,QAAQ,YACR,QAAQ,gBACJ,YAAY,yBACH,qBAAqB,aACjC,SAAS,cACR,UAAU,gBACR,YAAY,iBACX,aAAa,2BACH,uBAAuB,cACpC,UAAU,kBACN,cAAc,gBAChB,YAAY,cACd,UAAU,oBACJ,gBAAgB,0BACV,sBAAsB,gCAChB,4BAA4B,cAC9C,UAAU,gBACR,YAAY,gBACZ,YAAY,cACd,UAAU,aACX,SAAS,kBACJ,cAAc,gBAChB,YAAY,mBACT,eAAe,mBACf,eAAe,iBACjB,aAAa,kBACZ,cAAc;AAEb,eAAO;AAC9B,QAAI,AAAW,UAAD,KAAe;AAMC,MAL5B,iGAAkC;AAC9B,kBAAO,IAAI;AACX,+BAAU;AACV,gCAAW;AACX,6BAAQ;AACR,gCAAW;;;;AAGjB,QAAI,AAAW,UAAD,KAAe;AAMS,MALpC,8FAAgC;AAC5B,mBAAO,IAAI;AACX,gCAAU;AACV,iCAAW;AACX,8BAAQ;AACR,iCAAW;;;;AAMK,IAHtB,wEAAuB;AACnB,kBAAO,IAAI;AACX,iCAAY;AACZ,+BAAU;;;AAGoD,IADlE,0BAAoB,4CACR,AAAO,uCAAiC;AAGQ,IAD5D,wBAAkB,4CACN,AAAO,qCAA+B;AAGyB,IAD3E,0BAAoB,4CACR,AAAO,gDAA0C;AAE7D,QAAI,uBAAuB;AACkB,MAA3C,AAAO,AAA2B,gDAAQ;;AAGzB,IAAnB;AAEA,QAAI;AAGuD,MAFzD,6BAEW,AAAa,AAAuB,iBAA1C,KAAK;;EAEd","file":"../../../../../../../../../../packages/syncfusion_flutter_sliders/src/slider.dart.lib.js"}');
  // Exports:
  return {
    src__slider: slider$
  };
}));

//# sourceMappingURL=slider.dart.lib.js.map
