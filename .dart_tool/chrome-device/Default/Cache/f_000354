define(['dart_sdk', 'packages/get/get_rx/src/rx_types/rx_types.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/firebase_auth/firebase_auth.dart', 'packages/amar_karigor/app/global/util/app_pref.dart', 'packages/firebase_auth_platform_interface/src/firebase_auth_exception.dart', 'packages/get/get_navigation/src/routes/route_middleware.dart', 'packages/get/get_core/src/get_main.dart', 'packages/flutter/src/material/colors.dart', 'packages/get/get_utils/src/extensions/dynamic_extensions.dart', 'packages/firebase_auth_platform_interface/src/types.dart', 'packages/amar_karigor/app/global/config/constant.dart', 'packages/amar_karigor/app/modules/auth/provider/auth_provider.dart'], (function load__packages__amar_karigor__app__modules__auth__controllers__auth_controller_dart(dart_sdk, packages__get__get_rx__src__rx_types__rx_types$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__firebase_auth__firebase_auth$46dart, packages__amar_karigor__app__global__util__app_pref$46dart, packages__firebase_auth_platform_interface__src__firebase_auth_exception$46dart, packages__get__get_navigation__src__routes__route_middleware$46dart, packages__get__get_core__src__get_main$46dart, packages__flutter__src__material__colors$46dart, packages__get__get_utils__src__extensions__dynamic_extensions$46dart, packages__firebase_auth_platform_interface__src__types$46dart, packages__amar_karigor__app__global__config__constant$46dart, packages__amar_karigor__app__modules__auth__provider__auth_provider$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const rx_types = packages__get__get_rx__src__rx_types__rx_types$46dart.get_rx__src__rx_types__rx_types;
  const editable_text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__editable_text;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const firebase_auth = packages__firebase_auth__firebase_auth$46dart.firebase_auth;
  const app_pref = packages__amar_karigor__app__global__util__app_pref$46dart.app__global__util__app_pref;
  const firebase_auth_exception = packages__firebase_auth_platform_interface__src__firebase_auth_exception$46dart.src__firebase_auth_exception;
  const extension_navigation = packages__get__get_navigation__src__routes__route_middleware$46dart.get_navigation__src__extension_navigation;
  const snack = packages__get__get_navigation__src__routes__route_middleware$46dart.get_navigation__src__snackbar__snack;
  const get_controllers = packages__get__get_navigation__src__routes__route_middleware$46dart.get_state_manager__src__simple__get_controllers;
  const get_main = packages__get__get_core__src__get_main$46dart.get_core__src__get_main;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const dynamic_extensions = packages__get__get_utils__src__extensions__dynamic_extensions$46dart.get_utils__src__extensions__dynamic_extensions;
  const phone_auth = packages__firebase_auth_platform_interface__src__types$46dart.src__providers__phone_auth;
  const constant = packages__amar_karigor__app__global__config__constant$46dart.app__global__config__constant;
  const auth_provider = packages__amar_karigor__app__modules__auth__provider__auth_provider$46dart.app__modules__auth__provider__auth_provider;
  var auth_controller = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $replaceFirst = dartx.replaceFirst;
  var $_get = dartx._get;
  var $split = dartx.split;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FirebaseAuthExceptionTovoid: () => (T.FirebaseAuthExceptionTovoid = dart.constFn(dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])))(),
    GetBarOfObject: () => (T.GetBarOfObject = dart.constFn(snack.GetBar$(core.Object)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: auth_controller.AuthPages.prototype,
        [_name$]: "AuthPages.LOGIN",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: auth_controller.AuthPages.prototype,
        [_name$]: "AuthPages.REGISTER",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: auth_controller.AuthPages.prototype,
        [_name$]: "AuthPages.OTP",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: auth_controller.AuthPages.prototype,
        [_name$]: "AuthPages.PASSWORD",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], auth_controller.AuthPages);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isDismissible",
        [_Location_column]: 11,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "duration",
        [_Location_column]: 11,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 11,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "snackPosition",
        [_Location_column]: 11,
        [_Location_line]: 93,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "message",
        [_Location_column]: 11,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11], widget_inspector._Location);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 89,
        [_Location_file]: "file:///Volumes/others/projects/amarkarigor/lib/app/modules/auth/controllers/auth_controller.dart"
      });
    }
  }, false);
  var C = Array(12).fill(void 0);
  var I = ["package:amar_karigor/app/modules/auth/controllers/auth_controller.dart"];
  var _name$ = dart.privateName(auth_controller, "_name");
  auth_controller.AuthPages = class AuthPages extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (auth_controller.AuthPages.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = auth_controller.AuthPages.prototype;
  dart.addTypeTests(auth_controller.AuthPages);
  dart.addTypeCaches(auth_controller.AuthPages);
  dart.setLibraryUri(auth_controller.AuthPages, I[0]);
  dart.setFieldSignature(auth_controller.AuthPages, () => ({
    __proto__: dart.getFields(auth_controller.AuthPages.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(auth_controller.AuthPages, ['toString']);
  auth_controller.AuthPages.LOGIN = C[0] || CT.C0;
  auth_controller.AuthPages.REGISTER = C[1] || CT.C1;
  auth_controller.AuthPages.OTP = C[2] || CT.C2;
  auth_controller.AuthPages.PASSWORD = C[3] || CT.C3;
  auth_controller.AuthPages.values = C[4] || CT.C4;
  var verificationId = dart.privateName(auth_controller, "AuthController.verificationId");
  var paddingBottomOnKeyboardOverlap = dart.privateName(auth_controller, "AuthController.paddingBottomOnKeyboardOverlap");
  var activePage = dart.privateName(auth_controller, "AuthController.activePage");
  var lastPage = dart.privateName(auth_controller, "AuthController.lastPage");
  var isWaitingForOTP = dart.privateName(auth_controller, "AuthController.isWaitingForOTP");
  var isWaitingForVerification = dart.privateName(auth_controller, "AuthController.isWaitingForVerification");
  var isLoading = dart.privateName(auth_controller, "AuthController.isLoading");
  var isValidPhoneNumber = dart.privateName(auth_controller, "AuthController.isValidPhoneNumber");
  var isInvalidOTP = dart.privateName(auth_controller, "AuthController.isInvalidOTP");
  var enableVerifyButton = dart.privateName(auth_controller, "AuthController.enableVerifyButton");
  var settingPassword = dart.privateName(auth_controller, "AuthController.settingPassword");
  var obscurePassword = dart.privateName(auth_controller, "AuthController.obscurePassword");
  var obscureRepeatPassword = dart.privateName(auth_controller, "AuthController.obscureRepeatPassword");
  var phoneInputFieldController = dart.privateName(auth_controller, "AuthController.phoneInputFieldController");
  var otpInputFieldController = dart.privateName(auth_controller, "AuthController.otpInputFieldController");
  var passwordFieldController = dart.privateName(auth_controller, "AuthController.passwordFieldController");
  var repeatPasswordFieldController = dart.privateName(auth_controller, "AuthController.repeatPasswordFieldController");
  var auth = dart.privateName(auth_controller, "AuthController.auth");
  var myPref = dart.privateName(auth_controller, "AuthController.myPref");
  var __AuthController_confirmationResult = dart.privateName(auth_controller, "_#AuthController#confirmationResult");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _onVerificationCompleted = dart.privateName(auth_controller, "_onVerificationCompleted");
  var _onVerificationFailed = dart.privateName(auth_controller, "_onVerificationFailed");
  var _onCodeSent = dart.privateName(auth_controller, "_onCodeSent");
  var _onCodeTimeout = dart.privateName(auth_controller, "_onCodeTimeout");
  auth_controller.AuthController = class AuthController extends get_controllers.GetxController {
    get verificationId() {
      return this[verificationId];
    }
    set verificationId(value) {
      this[verificationId] = value;
    }
    get paddingBottomOnKeyboardOverlap() {
      return this[paddingBottomOnKeyboardOverlap];
    }
    set paddingBottomOnKeyboardOverlap(value) {
      this[paddingBottomOnKeyboardOverlap] = value;
    }
    get activePage() {
      return this[activePage];
    }
    set activePage(value) {
      this[activePage] = value;
    }
    get lastPage() {
      return this[lastPage];
    }
    set lastPage(value) {
      this[lastPage] = value;
    }
    get isWaitingForOTP() {
      return this[isWaitingForOTP];
    }
    set isWaitingForOTP(value) {
      this[isWaitingForOTP] = value;
    }
    get isWaitingForVerification() {
      return this[isWaitingForVerification];
    }
    set isWaitingForVerification(value) {
      this[isWaitingForVerification] = value;
    }
    get isLoading() {
      return this[isLoading];
    }
    set isLoading(value) {
      this[isLoading] = value;
    }
    get isValidPhoneNumber() {
      return this[isValidPhoneNumber];
    }
    set isValidPhoneNumber(value) {
      this[isValidPhoneNumber] = value;
    }
    get isInvalidOTP() {
      return this[isInvalidOTP];
    }
    set isInvalidOTP(value) {
      this[isInvalidOTP] = value;
    }
    get enableVerifyButton() {
      return this[enableVerifyButton];
    }
    set enableVerifyButton(value) {
      this[enableVerifyButton] = value;
    }
    get settingPassword() {
      return this[settingPassword];
    }
    set settingPassword(value) {
      this[settingPassword] = value;
    }
    get obscurePassword() {
      return this[obscurePassword];
    }
    set obscurePassword(value) {
      this[obscurePassword] = value;
    }
    get obscureRepeatPassword() {
      return this[obscureRepeatPassword];
    }
    set obscureRepeatPassword(value) {
      this[obscureRepeatPassword] = value;
    }
    get phoneInputFieldController() {
      return this[phoneInputFieldController];
    }
    set phoneInputFieldController(value) {
      this[phoneInputFieldController] = value;
    }
    get otpInputFieldController() {
      return this[otpInputFieldController];
    }
    set otpInputFieldController(value) {
      this[otpInputFieldController] = value;
    }
    get passwordFieldController() {
      return this[passwordFieldController];
    }
    set passwordFieldController(value) {
      this[passwordFieldController] = value;
    }
    get repeatPasswordFieldController() {
      return this[repeatPasswordFieldController];
    }
    set repeatPasswordFieldController(value) {
      this[repeatPasswordFieldController] = value;
    }
    get auth() {
      return this[auth];
    }
    set auth(value) {
      super.auth = value;
    }
    get myPref() {
      return this[myPref];
    }
    set myPref(value) {
      super.myPref = value;
    }
    get confirmationResult() {
      let t0;
      t0 = this[__AuthController_confirmationResult];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("confirmationResult")) : t0;
    }
    set confirmationResult(t0) {
      this[__AuthController_confirmationResult] = t0;
    }
    onInit() {
      super.onInit();
    }
    onReady() {
      super.onReady();
    }
    onClose() {
    }
    switchPage(page) {
      this.activePage.value = page;
      if (page !== auth_controller.AuthPages.LOGIN) this.lastPage.value = this.activePage.value;
    }
    toggleOTPIndicator() {
      this.isWaitingForOTP.value = !this.isWaitingForOTP.value;
    }
    toggleVerificationIndicator() {
      this.isWaitingForVerification.value = !this.isWaitingForVerification.value;
    }
    toggleSettingPasswordIndeicator() {
      this.settingPassword.value = !this.settingPassword.value;
    }
    phoneSignIn(phoneNumber) {
      return async.async(dart.void, (function* phoneSignIn() {
        true ? this.signInWithWeb(phoneNumber) : this.signInWithApp(phoneNumber);
      }).bind(this));
    }
    signInWithWeb(phoneNumber) {
      return async.async(dart.void, (function* signInWithWeb() {
        try {
          this.confirmationResult = (yield this.auth.signInWithPhoneNumber(phoneNumber, firebase_auth.RecaptchaVerifier.new({onSuccess: dart.fn(() => {
              core.print("captcha success");
              this.toggleOTPIndicator();
              this.switchPage(auth_controller.AuthPages.OTP);
            }, T.VoidTovoid()), onExpired: dart.fn(() => {
              core.print("captcha onExpired");
            }, T.VoidTovoid()), onError: dart.fn(e => {
              this.toggleOTPIndicator();
              this.switchPage(auth_controller.AuthPages.REGISTER);
              core.print("captcha error with " + dart.str(e.stackTrace));
            }, T.FirebaseAuthExceptionTovoid())})));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (firebase_auth_exception.FirebaseAuthException.is(e)) {
            this.switchPage(auth_controller.AuthPages.REGISTER);
            extension_navigation['ExtensionSnackbar|showSnackbar'](dart.dynamic, get_main.Get, new (T.GetBarOfObject()).new({isDismissible: true, duration: new core.Duration.new({seconds: 5}), backgroundColor: colors.Colors.red, snackPosition: snack.SnackPosition.TOP, message: e.message, $creationLocationd_0dea112b090073317d4: C[5] || CT.C5}));
            dynamic_extensions['GetDynamicUtils|printError'](firebase_auth_exception.FirebaseAuthException, e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyOTP(smsCode) {
      true ? this.verifyOTPWeb(smsCode) : this.verifyOTPApp(smsCode);
    }
    verifyOTPApp(smsCode) {
      return async.async(dart.void, (function* verifyOTPApp() {
        let credential = phone_auth.PhoneAuthProvider.credential({verificationId: core.String.as(this.verificationId), smsCode: smsCode});
        try {
          yield this.auth.signInWithCredential(credential);
          this.toggleVerificationIndicator();
          this.switchPage(auth_controller.AuthPages.PASSWORD);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this.isInvalidOTP.value = true;
            this.otpInputFieldController.text = "";
            this.toggleVerificationIndicator();
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyOTPWeb(smsCode) {
      return async.async(dart.void, (function* verifyOTPWeb() {
        try {
          yield this.confirmationResult.confirm(smsCode);
          this.switchPage(auth_controller.AuthPages.PASSWORD);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let st = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            core.print(st);
            this.toggleVerificationIndicator();
            this.otpInputFieldController.text = "";
            this.isInvalidOTP.value = true;
            this.enableVerifyButton.value = false;
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithApp(phoneNumber) {
      core.print("sign in with app");
      this.auth.verifyPhoneNumber({phoneNumber: phoneNumber, verificationCompleted: dart.bind(this, _onVerificationCompleted), verificationFailed: dart.bind(this, _onVerificationFailed), codeSent: dart.bind(this, _onCodeSent), codeAutoRetrievalTimeout: dart.bind(this, _onCodeTimeout)});
    }
    [_onVerificationCompleted](authCredential) {
      return async.async(dart.dynamic, (function* _onVerificationCompleted() {
        if (authCredential.smsCode != null) {
          this.otpInputFieldController.text = dart.nullCheck(authCredential.smsCode);
          this.switchPage(auth_controller.AuthPages.PASSWORD);
        }
      }).bind(this));
    }
    [_onVerificationFailed](exception) {
      if (exception.code === "invalid-phone-number") {
      }
    }
    [_onCodeSent](verificationId, forceResendingToken) {
      this.verificationId = verificationId;
      core.print(forceResendingToken);
      core.print("code sent");
      this.toggleOTPIndicator();
      this.switchPage(auth_controller.AuthPages.OTP);
    }
    [_onCodeTimeout](timeout) {
      return null;
    }
    createUser() {
      return async.async(core.String, (function* createUser() {
        let msg = constant.FAILED_MSG;
        let pass = this.passwordFieldController.text;
        let repeatPass = this.repeatPasswordFieldController.text;
        if (pass[$isEmpty]) {
          msg = "Password can't be empty!";
        } else if (pass.length < 6) {
          msg = "Password should contain at least 6 character!";
        } else if (repeatPass[$isEmpty]) {
          msg = "Repeat password can't be empty!";
        } else if (pass !== repeatPass) {
          msg = "Password doesn't match";
        } else {
          let phoneNo = this.phoneInputFieldController.text[$replaceFirst]("+880", "");
          if (phoneNo[$_get](0) === "0") phoneNo = phoneNo[$split]("0")[$_get](1)[$toString]();
          let phone = "+880" + phoneNo;
          let user = new (T.IdentityMapOfString$dynamic()).from(["phone", phone, "password", pass]);
          let response = (yield new auth_provider.AuthProvider.new().createUser(user));
          if (response.statusCode === 200) {
            let data = convert.jsonDecode(response.body);
            if (dart.equals(dart.dsend(data, '_get', ["status"]), true) && dart.dsend(data, '_get', ["token"]) != null) {
              let appPref = (yield this.myPref);
              dart.nullCheck(appPref).saveToken(dart.dsend(data, '_get', ["token"]));
              appPref.savePhoneNumber(phone);
              msg = "success";
            }
          }
        }
        return msg;
      }).bind(this));
    }
    login() {
      return async.async(core.String, (function* login() {
        let msg = constant.FAILED_MSG;
        let phone = this.phoneInputFieldController.text;
        let pass = this.passwordFieldController.text;
        if (phone[$isEmpty]) {
          msg = "Phone can't be empty!";
        } else if (pass[$isEmpty]) {
          msg = "Password can't be empty!";
        } else {
          let phoneNo = this.phoneInputFieldController.text[$replaceFirst]("+880", "");
          if (phoneNo[$_get](0) === "0") phoneNo = phoneNo[$split]("0")[$_get](1)[$toString]();
          let phone = "+880" + phoneNo;
          let user = new (T.IdentityMapOfString$dynamic()).from(["phone", phone, "password", pass]);
          let response = (yield new auth_provider.AuthProvider.new().login(user));
          if (response.statusCode === 200) {
            let data = convert.jsonDecode(response.body);
            if (dart.equals(dart.dsend(data, '_get', ["status"]), true) && dart.dsend(data, '_get', ["token"]) != null) {
              let appPref = (yield this.myPref);
              dart.nullCheck(appPref).saveToken(dart.dsend(data, '_get', ["token"]));
              appPref.savePhoneNumber(phone);
              msg = "success";
            } else {
              msg = core.String.as(dart.dsend(data, '_get', ["response"]));
            }
          }
        }
        return msg;
      }).bind(this));
    }
  };
  (auth_controller.AuthController.new = function() {
    this[verificationId] = null;
    this[__AuthController_confirmationResult] = null;
    this[paddingBottomOnKeyboardOverlap] = rx_types['DoubleExtension|get#obs'](0.0);
    this[activePage] = rx_types['RxT|get#obs'](auth_controller.AuthPages, auth_controller.AuthPages.LOGIN);
    this[lastPage] = rx_types['RxT|get#obs'](auth_controller.AuthPages, auth_controller.AuthPages.REGISTER);
    this[isWaitingForOTP] = rx_types['BoolExtension|get#obs'](false);
    this[isWaitingForVerification] = rx_types['BoolExtension|get#obs'](false);
    this[isLoading] = rx_types['BoolExtension|get#obs'](false);
    this[isValidPhoneNumber] = rx_types['BoolExtension|get#obs'](false);
    this[isInvalidOTP] = rx_types['BoolExtension|get#obs'](false);
    this[enableVerifyButton] = rx_types['BoolExtension|get#obs'](false);
    this[settingPassword] = rx_types['BoolExtension|get#obs'](false);
    this[obscurePassword] = rx_types['BoolExtension|get#obs'](true);
    this[obscureRepeatPassword] = rx_types['BoolExtension|get#obs'](true);
    this[phoneInputFieldController] = new editable_text.TextEditingController.new();
    this[otpInputFieldController] = new editable_text.TextEditingController.new();
    this[passwordFieldController] = new editable_text.TextEditingController.new();
    this[repeatPasswordFieldController] = new editable_text.TextEditingController.new();
    this[auth] = firebase_auth.FirebaseAuth.instance;
    this[myPref] = app_pref.AppPref.instance;
    auth_controller.AuthController.__proto__.new.call(this);
    ;
  }).prototype = auth_controller.AuthController.prototype;
  dart.addTypeTests(auth_controller.AuthController);
  dart.addTypeCaches(auth_controller.AuthController);
  dart.setMethodSignature(auth_controller.AuthController, () => ({
    __proto__: dart.getMethods(auth_controller.AuthController.__proto__),
    switchPage: dart.fnType(dart.void, [auth_controller.AuthPages]),
    toggleOTPIndicator: dart.fnType(dart.void, []),
    toggleVerificationIndicator: dart.fnType(dart.void, []),
    toggleSettingPasswordIndeicator: dart.fnType(dart.void, []),
    phoneSignIn: dart.fnType(dart.void, [core.String]),
    signInWithWeb: dart.fnType(dart.void, [core.String]),
    verifyOTP: dart.fnType(dart.void, [core.String]),
    verifyOTPApp: dart.fnType(dart.void, [core.String]),
    verifyOTPWeb: dart.fnType(dart.void, [core.String]),
    signInWithApp: dart.fnType(dart.void, [core.String]),
    [_onVerificationCompleted]: dart.fnType(dart.dynamic, [phone_auth.PhoneAuthCredential]),
    [_onVerificationFailed]: dart.fnType(dart.dynamic, [firebase_auth_exception.FirebaseAuthException]),
    [_onCodeSent]: dart.fnType(dart.dynamic, [core.String, dart.nullable(core.int)]),
    [_onCodeTimeout]: dart.fnType(dart.dynamic, [core.String]),
    createUser: dart.fnType(async.Future$(core.String), []),
    login: dart.fnType(async.Future$(core.String), [])
  }));
  dart.setGetterSignature(auth_controller.AuthController, () => ({
    __proto__: dart.getGetters(auth_controller.AuthController.__proto__),
    confirmationResult: firebase_auth.ConfirmationResult
  }));
  dart.setSetterSignature(auth_controller.AuthController, () => ({
    __proto__: dart.getSetters(auth_controller.AuthController.__proto__),
    confirmationResult: firebase_auth.ConfirmationResult
  }));
  dart.setLibraryUri(auth_controller.AuthController, I[0]);
  dart.setFieldSignature(auth_controller.AuthController, () => ({
    __proto__: dart.getFields(auth_controller.AuthController.__proto__),
    verificationId: dart.fieldType(dart.dynamic),
    [__AuthController_confirmationResult]: dart.fieldType(dart.nullable(firebase_auth.ConfirmationResult)),
    paddingBottomOnKeyboardOverlap: dart.fieldType(rx_types.RxDouble),
    activePage: dart.fieldType(rx_types.Rx$(auth_controller.AuthPages)),
    lastPage: dart.fieldType(rx_types.Rx$(auth_controller.AuthPages)),
    isWaitingForOTP: dart.fieldType(rx_types.RxBool),
    isWaitingForVerification: dart.fieldType(rx_types.RxBool),
    isLoading: dart.fieldType(rx_types.RxBool),
    isValidPhoneNumber: dart.fieldType(rx_types.RxBool),
    isInvalidOTP: dart.fieldType(rx_types.RxBool),
    enableVerifyButton: dart.fieldType(rx_types.RxBool),
    settingPassword: dart.fieldType(rx_types.RxBool),
    obscurePassword: dart.fieldType(rx_types.RxBool),
    obscureRepeatPassword: dart.fieldType(rx_types.RxBool),
    phoneInputFieldController: dart.fieldType(editable_text.TextEditingController),
    otpInputFieldController: dart.fieldType(editable_text.TextEditingController),
    passwordFieldController: dart.fieldType(editable_text.TextEditingController),
    repeatPasswordFieldController: dart.fieldType(editable_text.TextEditingController),
    auth: dart.finalFieldType(firebase_auth.FirebaseAuth),
    myPref: dart.finalFieldType(async.Future$(dart.nullable(app_pref.AppPref)))
  }));
  dart.trackLibraries("packages/amar_karigor/app/modules/auth/controllers/auth_controller.dart", {
    "package:amar_karigor/app/modules/auth/controllers/auth_controller.dart": auth_controller
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["auth_controller.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/amar_karigor/app/modules/auth/controllers/auth_controller.dart.lib.js"}');
  // Exports:
  return {
    app__modules__auth__controllers__auth_controller: auth_controller
  };
}));

//# sourceMappingURL=auth_controller.dart.lib.js.map
